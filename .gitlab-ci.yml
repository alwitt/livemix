image: golang:1.20.1

stages:
  - test
  - build

cicd:
  stage: test

  services:
    # Support Postgres
    - name: postgres:15
      alias: postgres
      variables:
        POSTGRES_DB: postgres
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres

    # Support memcached
    - name: memcached:1.6.20-alpine
      alias: memcached
      command:
        - -m
        - "256"
        - -I
        - 10m
        - -p
        - "18080"

    # Support S3
    - name: quay.io/minio/minio:RELEASE.2023-07-07T07-13-57Z
      alias: minio
      variables:
        LOG_LEVEL: info
        MINIO_ROOT_USER: root
        MINIO_ROOT_PASSWORD: password
      command:
        - server
        - /data
        - --console-address
        - ":9090"

  variables:
    GOOGLE_APPLICATION_CREDENTIALS: gcp-creds.json
    PGHOST: postgres
    PGPORT: 5432
    PGDATABASE: postgres
    PGUSER: postgres
    PGPASSWORD: postgres
    MEMCACHED_HOST: memcached
    MEMCACHED_PORT: 18080
    AWS_ACCESS_KEY_ID: root
    AWS_SECRET_ACCESS_KEY: password
    UNITTEST_S3_ENDPOINT: minio:9000

  script:
    - go install github.com/vektra/mockery/v2@v2.38.0
    - mockery --dir db --name PersistenceManager
    - mockery --dir db --name ConnectionManager
    - mockery --dir utils --name SegmentReader
    - mockery --dir utils --name VideoSegmentCache
    - mockery --dir utils --name S3Client
    - mockery --dir utils --name Broadcaster
    - mockery --dir vod --name PlaylistBuilder
    - mockery --dir vod --name SegmentManager
    - mockery --dir vod --name PlaylistManager
    - mockery --dir api --name RequestResponseClient
    - mockery --dir control --name SystemManager
    - mockery --dir control --name EdgeRequestClient
    - mockery --dir edge --name VideoSourceOperator
    - mockery --dir forwarder --name SegmentSender
    - mockery --dir forwarder --name RecordingSegmentForwarder
    - mockery --dir forwarder --name LiveStreamSegmentForwarder
    - go fmt $(go list ./...)
    - go vet $(go list ./...)
    - go test ./...

docker:
  stage: build

  services:
    - docker:dind

  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE:0.1.0-rc1-$CI_COMMIT_REF_SLUG" -t "$CI_REGISTRY_IMAGE:0.1.0-rc1" -f Dockerfile .
    - docker push "$CI_REGISTRY_IMAGE:0.1.0-rc1-$CI_COMMIT_REF_SLUG"
    - docker push "$CI_REGISTRY_IMAGE:0.1.0-rc1"
