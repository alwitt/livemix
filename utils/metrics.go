package utils

import (
	"context"

	"github.com/alwitt/goutils"
	"github.com/prometheus/client_golang/prometheus"
)

// Metrics generated by the system
const (
	MetricsNameUtilCacheCurrentCount = "utils_segment_cache_currently_cached"
	MetricsNameUtilCacheSegmentLen   = "utils_segment_cache_io_bytes_total"
	MetricsNameUtilCacheIOLatency    = "utils_segment_cache_io_latency_sec_total"
	MetricsNameUtilCacheIOCount      = "utils_segment_cache_io_ops_total"

	MetricsNameUtilFetcherSegmentLen  = "utils_segment_fetcher_read_bytes_total"
	MetricsNameUtilFetcherReadLatency = "utils_segment_fetcher_read_latency_sec_total"
	MetricsNameUtilFetcherIOCount     = "utils_segment_fetcher_read_ops_total"

	MetricsNameVODSegmentMgmtSegmentLen = "vod_segment_mgmt_read_bytes_total"
	MetricsNameVODSegmentMgmtIOCount    = "vod_segment_mgmt_read_ops_total"

	MetricsNameVODPlaylistBuiltCount = "vod_playlist_builder_playlist_gen_total"

	MetricsNameTrackerMonitorPlaylistReadCount = "tracker_monitor_read_playlists_total"
	MetricsNameTrackerMonitorNewSegmentCount   = "tracker_monitor_new_segment_total"

	MetricsNameTrackerMonitorSegmentReadLen   = "tracker_monitor_read_segment_bytes_total"
	MetricsNameTrackerMonitorSegmentReadCount = "tracker_monitor_read_segment_total"

	MetricsNameTrackerMonitorSegmentForwardLen   = "tracker_monitor_forward_segment_bytes_total"
	MetricsNameTrackerMonitorSegmentForwardCount = "tracker_monitor_forward_segment_total"

	MetricsNameForwarderSenderSegmentForwardLen     = "forwarder_sender_segment_bytes_total"
	MetricsNameForwarderSenderSegmentForwardLatency = "forwarder_sender_segment_send_latency_sec_total"
	MetricsNameForwarderSenderSegmentForwardCount   = "forwarder_sender_segment_total"

	MetricsNameEdgeManagerSegmentReadLen       = "edge_manager_read_segment_bytes_total"
	MetricsNameEdgeManagerSegmentReadCount     = "edge_manager_read_segment_total"
	MetricsNameEdgeManagerActiveRecordingCount = "edge_manager_currently_active_recordings"

	MetricsNameControlCentralSegmentMgmtSegmentReadLen   = "control_segment_mgmt_read_bytes_total"
	MetricsNameControlCentralSegmentMgmtSegmentReadCount = "control_segment_mgmt_read_total"

	MetricsNameControlManagerRegisteredSourceCount    = "control_manager_registered_sources"
	MetricsNameControlManagerConnectedSourceCount     = "control_manager_connected_sources"
	MetricsNameControlManagerRegisteredRecordingCount = "control_manager_registered_recordings"
	MetricsNameControlManagerActiveRecordingCount     = "control_manager_active_recordings"
)

// SegmentMetricsAgent helper agent for writing segment related metrics
type SegmentMetricsAgent interface {
	/*
		RecordSegment update metrics for new segment

			@param segmentSize int - segment size
			@param labels map[string]string - label to attach to the metrics
	*/
	RecordSegment(segmentSize int, labels map[string]string)
}

/*
NewSegmentMetricsAgent define a new SegmentMetricsAgent

	@param ctxt context.Context - execution context
	@param lengthMetricsName string - segment length metrics name
	@param lengthMetricsHelpMsg string - segment length metrics helper message
	@param countMetricsName string - segment count metrics name
	@param countMetricsHelpMsg string - segment count metrics helper message
	@param expectedLabels []string - set of labels to attach to the metrics
	@returns new metrics helper agent
*/
func NewSegmentMetricsAgent(
	ctxt context.Context,
	collector goutils.MetricsCollector,
	lengthMetricsName, lengthMetricsHelpMsg, countMetricsName, countMetricsHelpMsg string,
	expectedLabels []string,
) (SegmentMetricsAgent, error) {
	lengthMetrics, err := collector.InstallCustomCounterVecMetrics(
		ctxt, lengthMetricsName, lengthMetricsHelpMsg, expectedLabels,
	)
	if err != nil {
		return nil, err
	}
	countMetrics, err := collector.InstallCustomCounterVecMetrics(
		ctxt, countMetricsName, countMetricsHelpMsg, expectedLabels,
	)
	if err != nil {
		return nil, err
	}
	return &segmentMetricsAgentImpl{
		segmentLenMetrics: lengthMetrics, segmentCountMetrics: countMetrics,
	}, nil
}

// segmentMetricsAgentImpl implements SegmentMetricsAgent
type segmentMetricsAgentImpl struct {
	segmentLenMetrics   *prometheus.CounterVec
	segmentCountMetrics *prometheus.CounterVec
}

func (a *segmentMetricsAgentImpl) RecordSegment(segmentSize int, labels map[string]string) {
	a.segmentLenMetrics.With(labels).Add(float64(segmentSize))
	a.segmentCountMetrics.With(labels).Inc()
}
