// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/alwitt/livemix/common"
	"github.com/alwitt/livemix/hls"
	mock "github.com/stretchr/testify/mock"
)

// NewPlaylistManager creates a new instance of PlaylistManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlaylistManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlaylistManager {
	mock := &PlaylistManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PlaylistManager is an autogenerated mock type for the PlaylistManager type
type PlaylistManager struct {
	mock.Mock
}

type PlaylistManager_Expecter struct {
	mock *mock.Mock
}

func (_m *PlaylistManager) EXPECT() *PlaylistManager_Expecter {
	return &PlaylistManager_Expecter{mock: &_m.Mock}
}

// GetLiveStreamPlaylist provides a mock function for the type PlaylistManager
func (_mock *PlaylistManager) GetLiveStreamPlaylist(ctxt context.Context, target common.VideoSource, timestamp time.Time, addMediaSequence bool) (hls.Playlist, error) {
	ret := _mock.Called(ctxt, target, timestamp, addMediaSequence)

	if len(ret) == 0 {
		panic("no return value specified for GetLiveStreamPlaylist")
	}

	var r0 hls.Playlist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource, time.Time, bool) (hls.Playlist, error)); ok {
		return returnFunc(ctxt, target, timestamp, addMediaSequence)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource, time.Time, bool) hls.Playlist); ok {
		r0 = returnFunc(ctxt, target, timestamp, addMediaSequence)
	} else {
		r0 = ret.Get(0).(hls.Playlist)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, common.VideoSource, time.Time, bool) error); ok {
		r1 = returnFunc(ctxt, target, timestamp, addMediaSequence)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlaylistManager_GetLiveStreamPlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLiveStreamPlaylist'
type PlaylistManager_GetLiveStreamPlaylist_Call struct {
	*mock.Call
}

// GetLiveStreamPlaylist is a helper method to define mock.On call
//   - ctxt context.Context
//   - target common.VideoSource
//   - timestamp time.Time
//   - addMediaSequence bool
func (_e *PlaylistManager_Expecter) GetLiveStreamPlaylist(ctxt interface{}, target interface{}, timestamp interface{}, addMediaSequence interface{}) *PlaylistManager_GetLiveStreamPlaylist_Call {
	return &PlaylistManager_GetLiveStreamPlaylist_Call{Call: _e.mock.On("GetLiveStreamPlaylist", ctxt, target, timestamp, addMediaSequence)}
}

func (_c *PlaylistManager_GetLiveStreamPlaylist_Call) Run(run func(ctxt context.Context, target common.VideoSource, timestamp time.Time, addMediaSequence bool)) *PlaylistManager_GetLiveStreamPlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSource
		if args[1] != nil {
			arg1 = args[1].(common.VideoSource)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PlaylistManager_GetLiveStreamPlaylist_Call) Return(playlist hls.Playlist, err error) *PlaylistManager_GetLiveStreamPlaylist_Call {
	_c.Call.Return(playlist, err)
	return _c
}

func (_c *PlaylistManager_GetLiveStreamPlaylist_Call) RunAndReturn(run func(ctxt context.Context, target common.VideoSource, timestamp time.Time, addMediaSequence bool) (hls.Playlist, error)) *PlaylistManager_GetLiveStreamPlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingStreamPlaylist provides a mock function for the type PlaylistManager
func (_mock *PlaylistManager) GetRecordingStreamPlaylist(ctxt context.Context, recording common.Recording) (hls.Playlist, error) {
	ret := _mock.Called(ctxt, recording)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordingStreamPlaylist")
	}

	var r0 hls.Playlist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Recording) (hls.Playlist, error)); ok {
		return returnFunc(ctxt, recording)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Recording) hls.Playlist); ok {
		r0 = returnFunc(ctxt, recording)
	} else {
		r0 = ret.Get(0).(hls.Playlist)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, common.Recording) error); ok {
		r1 = returnFunc(ctxt, recording)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlaylistManager_GetRecordingStreamPlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingStreamPlaylist'
type PlaylistManager_GetRecordingStreamPlaylist_Call struct {
	*mock.Call
}

// GetRecordingStreamPlaylist is a helper method to define mock.On call
//   - ctxt context.Context
//   - recording common.Recording
func (_e *PlaylistManager_Expecter) GetRecordingStreamPlaylist(ctxt interface{}, recording interface{}) *PlaylistManager_GetRecordingStreamPlaylist_Call {
	return &PlaylistManager_GetRecordingStreamPlaylist_Call{Call: _e.mock.On("GetRecordingStreamPlaylist", ctxt, recording)}
}

func (_c *PlaylistManager_GetRecordingStreamPlaylist_Call) Run(run func(ctxt context.Context, recording common.Recording)) *PlaylistManager_GetRecordingStreamPlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Recording
		if args[1] != nil {
			arg1 = args[1].(common.Recording)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PlaylistManager_GetRecordingStreamPlaylist_Call) Return(playlist hls.Playlist, err error) *PlaylistManager_GetRecordingStreamPlaylist_Call {
	_c.Call.Return(playlist, err)
	return _c
}

func (_c *PlaylistManager_GetRecordingStreamPlaylist_Call) RunAndReturn(run func(ctxt context.Context, recording common.Recording) (hls.Playlist, error)) *PlaylistManager_GetRecordingStreamPlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegment provides a mock function for the type PlaylistManager
func (_mock *PlaylistManager) GetSegment(ctxt context.Context, target common.VideoSegment) ([]byte, error) {
	ret := _mock.Called(ctxt, target)

	if len(ret) == 0 {
		panic("no return value specified for GetSegment")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSegment) ([]byte, error)); ok {
		return returnFunc(ctxt, target)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSegment) []byte); ok {
		r0 = returnFunc(ctxt, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, common.VideoSegment) error); ok {
		r1 = returnFunc(ctxt, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlaylistManager_GetSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegment'
type PlaylistManager_GetSegment_Call struct {
	*mock.Call
}

// GetSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - target common.VideoSegment
func (_e *PlaylistManager_Expecter) GetSegment(ctxt interface{}, target interface{}) *PlaylistManager_GetSegment_Call {
	return &PlaylistManager_GetSegment_Call{Call: _e.mock.On("GetSegment", ctxt, target)}
}

func (_c *PlaylistManager_GetSegment_Call) Run(run func(ctxt context.Context, target common.VideoSegment)) *PlaylistManager_GetSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSegment
		if args[1] != nil {
			arg1 = args[1].(common.VideoSegment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PlaylistManager_GetSegment_Call) Return(bytes []byte, err error) *PlaylistManager_GetSegment_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *PlaylistManager_GetSegment_Call) RunAndReturn(run func(ctxt context.Context, target common.VideoSegment) ([]byte, error)) *PlaylistManager_GetSegment_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type PlaylistManager
func (_mock *PlaylistManager) Stop(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PlaylistManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type PlaylistManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *PlaylistManager_Expecter) Stop(ctxt interface{}) *PlaylistManager_Stop_Call {
	return &PlaylistManager_Stop_Call{Call: _e.mock.On("Stop", ctxt)}
}

func (_c *PlaylistManager_Stop_Call) Run(run func(ctxt context.Context)) *PlaylistManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PlaylistManager_Stop_Call) Return(err error) *PlaylistManager_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PlaylistManager_Stop_Call) RunAndReturn(run func(ctxt context.Context) error) *PlaylistManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewPlaylistBuilder creates a new instance of PlaylistBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPlaylistBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *PlaylistBuilder {
	mock := &PlaylistBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PlaylistBuilder is an autogenerated mock type for the PlaylistBuilder type
type PlaylistBuilder struct {
	mock.Mock
}

type PlaylistBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *PlaylistBuilder) EXPECT() *PlaylistBuilder_Expecter {
	return &PlaylistBuilder_Expecter{mock: &_m.Mock}
}

// GetLiveStreamPlaylist provides a mock function for the type PlaylistBuilder
func (_mock *PlaylistBuilder) GetLiveStreamPlaylist(ctxt context.Context, target common.VideoSource, timestamp time.Time, addMediaSequence bool) (hls.Playlist, error) {
	ret := _mock.Called(ctxt, target, timestamp, addMediaSequence)

	if len(ret) == 0 {
		panic("no return value specified for GetLiveStreamPlaylist")
	}

	var r0 hls.Playlist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource, time.Time, bool) (hls.Playlist, error)); ok {
		return returnFunc(ctxt, target, timestamp, addMediaSequence)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource, time.Time, bool) hls.Playlist); ok {
		r0 = returnFunc(ctxt, target, timestamp, addMediaSequence)
	} else {
		r0 = ret.Get(0).(hls.Playlist)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, common.VideoSource, time.Time, bool) error); ok {
		r1 = returnFunc(ctxt, target, timestamp, addMediaSequence)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlaylistBuilder_GetLiveStreamPlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLiveStreamPlaylist'
type PlaylistBuilder_GetLiveStreamPlaylist_Call struct {
	*mock.Call
}

// GetLiveStreamPlaylist is a helper method to define mock.On call
//   - ctxt context.Context
//   - target common.VideoSource
//   - timestamp time.Time
//   - addMediaSequence bool
func (_e *PlaylistBuilder_Expecter) GetLiveStreamPlaylist(ctxt interface{}, target interface{}, timestamp interface{}, addMediaSequence interface{}) *PlaylistBuilder_GetLiveStreamPlaylist_Call {
	return &PlaylistBuilder_GetLiveStreamPlaylist_Call{Call: _e.mock.On("GetLiveStreamPlaylist", ctxt, target, timestamp, addMediaSequence)}
}

func (_c *PlaylistBuilder_GetLiveStreamPlaylist_Call) Run(run func(ctxt context.Context, target common.VideoSource, timestamp time.Time, addMediaSequence bool)) *PlaylistBuilder_GetLiveStreamPlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSource
		if args[1] != nil {
			arg1 = args[1].(common.VideoSource)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PlaylistBuilder_GetLiveStreamPlaylist_Call) Return(playlist hls.Playlist, err error) *PlaylistBuilder_GetLiveStreamPlaylist_Call {
	_c.Call.Return(playlist, err)
	return _c
}

func (_c *PlaylistBuilder_GetLiveStreamPlaylist_Call) RunAndReturn(run func(ctxt context.Context, target common.VideoSource, timestamp time.Time, addMediaSequence bool) (hls.Playlist, error)) *PlaylistBuilder_GetLiveStreamPlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingStreamPlaylist provides a mock function for the type PlaylistBuilder
func (_mock *PlaylistBuilder) GetRecordingStreamPlaylist(ctxt context.Context, recording common.Recording) (hls.Playlist, error) {
	ret := _mock.Called(ctxt, recording)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordingStreamPlaylist")
	}

	var r0 hls.Playlist
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Recording) (hls.Playlist, error)); ok {
		return returnFunc(ctxt, recording)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Recording) hls.Playlist); ok {
		r0 = returnFunc(ctxt, recording)
	} else {
		r0 = ret.Get(0).(hls.Playlist)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, common.Recording) error); ok {
		r1 = returnFunc(ctxt, recording)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PlaylistBuilder_GetRecordingStreamPlaylist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingStreamPlaylist'
type PlaylistBuilder_GetRecordingStreamPlaylist_Call struct {
	*mock.Call
}

// GetRecordingStreamPlaylist is a helper method to define mock.On call
//   - ctxt context.Context
//   - recording common.Recording
func (_e *PlaylistBuilder_Expecter) GetRecordingStreamPlaylist(ctxt interface{}, recording interface{}) *PlaylistBuilder_GetRecordingStreamPlaylist_Call {
	return &PlaylistBuilder_GetRecordingStreamPlaylist_Call{Call: _e.mock.On("GetRecordingStreamPlaylist", ctxt, recording)}
}

func (_c *PlaylistBuilder_GetRecordingStreamPlaylist_Call) Run(run func(ctxt context.Context, recording common.Recording)) *PlaylistBuilder_GetRecordingStreamPlaylist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Recording
		if args[1] != nil {
			arg1 = args[1].(common.Recording)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PlaylistBuilder_GetRecordingStreamPlaylist_Call) Return(playlist hls.Playlist, err error) *PlaylistBuilder_GetRecordingStreamPlaylist_Call {
	_c.Call.Return(playlist, err)
	return _c
}

func (_c *PlaylistBuilder_GetRecordingStreamPlaylist_Call) RunAndReturn(run func(ctxt context.Context, recording common.Recording) (hls.Playlist, error)) *PlaylistBuilder_GetRecordingStreamPlaylist_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegmentManager creates a new instance of SegmentManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentManager {
	mock := &SegmentManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SegmentManager is an autogenerated mock type for the SegmentManager type
type SegmentManager struct {
	mock.Mock
}

type SegmentManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentManager) EXPECT() *SegmentManager_Expecter {
	return &SegmentManager_Expecter{mock: &_m.Mock}
}

// GetSegment provides a mock function for the type SegmentManager
func (_mock *SegmentManager) GetSegment(ctxt context.Context, target common.VideoSegment) ([]byte, error) {
	ret := _mock.Called(ctxt, target)

	if len(ret) == 0 {
		panic("no return value specified for GetSegment")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSegment) ([]byte, error)); ok {
		return returnFunc(ctxt, target)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSegment) []byte); ok {
		r0 = returnFunc(ctxt, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, common.VideoSegment) error); ok {
		r1 = returnFunc(ctxt, target)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SegmentManager_GetSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegment'
type SegmentManager_GetSegment_Call struct {
	*mock.Call
}

// GetSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - target common.VideoSegment
func (_e *SegmentManager_Expecter) GetSegment(ctxt interface{}, target interface{}) *SegmentManager_GetSegment_Call {
	return &SegmentManager_GetSegment_Call{Call: _e.mock.On("GetSegment", ctxt, target)}
}

func (_c *SegmentManager_GetSegment_Call) Run(run func(ctxt context.Context, target common.VideoSegment)) *SegmentManager_GetSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSegment
		if args[1] != nil {
			arg1 = args[1].(common.VideoSegment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SegmentManager_GetSegment_Call) Return(bytes []byte, err error) *SegmentManager_GetSegment_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *SegmentManager_GetSegment_Call) RunAndReturn(run func(ctxt context.Context, target common.VideoSegment) ([]byte, error)) *SegmentManager_GetSegment_Call {
	_c.Call.Return(run)
	return _c
}
