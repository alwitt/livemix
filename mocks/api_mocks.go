// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/alwitt/goutils"
	mock "github.com/stretchr/testify/mock"
)

// NewRequestResponseClient creates a new instance of RequestResponseClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestResponseClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestResponseClient {
	mock := &RequestResponseClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RequestResponseClient is an autogenerated mock type for the RequestResponseClient type
type RequestResponseClient struct {
	mock.Mock
}

type RequestResponseClient_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestResponseClient) EXPECT() *RequestResponseClient_Expecter {
	return &RequestResponseClient_Expecter{mock: &_m.Mock}
}

// Request provides a mock function for the type RequestResponseClient
func (_mock *RequestResponseClient) Request(ctxt context.Context, targetID string, message []byte, metadata map[string]string, callParam goutils.RequestCallParam) (string, error) {
	ret := _mock.Called(ctxt, targetID, message, metadata, callParam)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]string, goutils.RequestCallParam) (string, error)); ok {
		return returnFunc(ctxt, targetID, message, metadata, callParam)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte, map[string]string, goutils.RequestCallParam) string); ok {
		r0 = returnFunc(ctxt, targetID, message, metadata, callParam)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []byte, map[string]string, goutils.RequestCallParam) error); ok {
		r1 = returnFunc(ctxt, targetID, message, metadata, callParam)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// RequestResponseClient_Request_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Request'
type RequestResponseClient_Request_Call struct {
	*mock.Call
}

// Request is a helper method to define mock.On call
//   - ctxt context.Context
//   - targetID string
//   - message []byte
//   - metadata map[string]string
//   - callParam goutils.RequestCallParam
func (_e *RequestResponseClient_Expecter) Request(ctxt interface{}, targetID interface{}, message interface{}, metadata interface{}, callParam interface{}) *RequestResponseClient_Request_Call {
	return &RequestResponseClient_Request_Call{Call: _e.mock.On("Request", ctxt, targetID, message, metadata, callParam)}
}

func (_c *RequestResponseClient_Request_Call) Run(run func(ctxt context.Context, targetID string, message []byte, metadata map[string]string, callParam goutils.RequestCallParam)) *RequestResponseClient_Request_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 map[string]string
		if args[3] != nil {
			arg3 = args[3].(map[string]string)
		}
		var arg4 goutils.RequestCallParam
		if args[4] != nil {
			arg4 = args[4].(goutils.RequestCallParam)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *RequestResponseClient_Request_Call) Return(s string, err error) *RequestResponseClient_Request_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *RequestResponseClient_Request_Call) RunAndReturn(run func(ctxt context.Context, targetID string, message []byte, metadata map[string]string, callParam goutils.RequestCallParam) (string, error)) *RequestResponseClient_Request_Call {
	_c.Call.Return(run)
	return _c
}

// Respond provides a mock function for the type RequestResponseClient
func (_mock *RequestResponseClient) Respond(ctxt context.Context, originalReq goutils.ReqRespMessage, message []byte, metadata map[string]string, blocking bool) error {
	ret := _mock.Called(ctxt, originalReq, message, metadata, blocking)

	if len(ret) == 0 {
		panic("no return value specified for Respond")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, goutils.ReqRespMessage, []byte, map[string]string, bool) error); ok {
		r0 = returnFunc(ctxt, originalReq, message, metadata, blocking)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RequestResponseClient_Respond_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Respond'
type RequestResponseClient_Respond_Call struct {
	*mock.Call
}

// Respond is a helper method to define mock.On call
//   - ctxt context.Context
//   - originalReq goutils.ReqRespMessage
//   - message []byte
//   - metadata map[string]string
//   - blocking bool
func (_e *RequestResponseClient_Expecter) Respond(ctxt interface{}, originalReq interface{}, message interface{}, metadata interface{}, blocking interface{}) *RequestResponseClient_Respond_Call {
	return &RequestResponseClient_Respond_Call{Call: _e.mock.On("Respond", ctxt, originalReq, message, metadata, blocking)}
}

func (_c *RequestResponseClient_Respond_Call) Run(run func(ctxt context.Context, originalReq goutils.ReqRespMessage, message []byte, metadata map[string]string, blocking bool)) *RequestResponseClient_Respond_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 goutils.ReqRespMessage
		if args[1] != nil {
			arg1 = args[1].(goutils.ReqRespMessage)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 map[string]string
		if args[3] != nil {
			arg3 = args[3].(map[string]string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *RequestResponseClient_Respond_Call) Return(err error) *RequestResponseClient_Respond_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RequestResponseClient_Respond_Call) RunAndReturn(run func(ctxt context.Context, originalReq goutils.ReqRespMessage, message []byte, metadata map[string]string, blocking bool) error) *RequestResponseClient_Respond_Call {
	_c.Call.Return(run)
	return _c
}

// SetInboundRequestHandler provides a mock function for the type RequestResponseClient
func (_mock *RequestResponseClient) SetInboundRequestHandler(ctxt context.Context, handler goutils.ReqRespMessageHandler) error {
	ret := _mock.Called(ctxt, handler)

	if len(ret) == 0 {
		panic("no return value specified for SetInboundRequestHandler")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, goutils.ReqRespMessageHandler) error); ok {
		r0 = returnFunc(ctxt, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RequestResponseClient_SetInboundRequestHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetInboundRequestHandler'
type RequestResponseClient_SetInboundRequestHandler_Call struct {
	*mock.Call
}

// SetInboundRequestHandler is a helper method to define mock.On call
//   - ctxt context.Context
//   - handler goutils.ReqRespMessageHandler
func (_e *RequestResponseClient_Expecter) SetInboundRequestHandler(ctxt interface{}, handler interface{}) *RequestResponseClient_SetInboundRequestHandler_Call {
	return &RequestResponseClient_SetInboundRequestHandler_Call{Call: _e.mock.On("SetInboundRequestHandler", ctxt, handler)}
}

func (_c *RequestResponseClient_SetInboundRequestHandler_Call) Run(run func(ctxt context.Context, handler goutils.ReqRespMessageHandler)) *RequestResponseClient_SetInboundRequestHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 goutils.ReqRespMessageHandler
		if args[1] != nil {
			arg1 = args[1].(goutils.ReqRespMessageHandler)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RequestResponseClient_SetInboundRequestHandler_Call) Return(err error) *RequestResponseClient_SetInboundRequestHandler_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RequestResponseClient_SetInboundRequestHandler_Call) RunAndReturn(run func(ctxt context.Context, handler goutils.ReqRespMessageHandler) error) *RequestResponseClient_SetInboundRequestHandler_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type RequestResponseClient
func (_mock *RequestResponseClient) Stop(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// RequestResponseClient_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type RequestResponseClient_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *RequestResponseClient_Expecter) Stop(ctxt interface{}) *RequestResponseClient_Stop_Call {
	return &RequestResponseClient_Stop_Call{Call: _e.mock.On("Stop", ctxt)}
}

func (_c *RequestResponseClient_Stop_Call) Run(run func(ctxt context.Context)) *RequestResponseClient_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RequestResponseClient_Stop_Call) Return(err error) *RequestResponseClient_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *RequestResponseClient_Stop_Call) RunAndReturn(run func(ctxt context.Context) error) *RequestResponseClient_Stop_Call {
	_c.Call.Return(run)
	return _c
}
