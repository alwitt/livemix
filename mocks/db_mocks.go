// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/alwitt/livemix/common"
	"github.com/alwitt/livemix/db"
	"github.com/alwitt/livemix/hls"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// NewConnectionManager creates a new instance of ConnectionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionManager {
	mock := &ConnectionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ConnectionManager is an autogenerated mock type for the ConnectionManager type
type ConnectionManager struct {
	mock.Mock
}

type ConnectionManager_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectionManager) EXPECT() *ConnectionManager_Expecter {
	return &ConnectionManager_Expecter{mock: &_m.Mock}
}

// ApplySQLitePragmas provides a mock function for the type ConnectionManager
func (_mock *ConnectionManager) ApplySQLitePragmas(config common.SqliteConfig) error {
	ret := _mock.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for ApplySQLitePragmas")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(common.SqliteConfig) error); ok {
		r0 = returnFunc(config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// ConnectionManager_ApplySQLitePragmas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApplySQLitePragmas'
type ConnectionManager_ApplySQLitePragmas_Call struct {
	*mock.Call
}

// ApplySQLitePragmas is a helper method to define mock.On call
//   - config common.SqliteConfig
func (_e *ConnectionManager_Expecter) ApplySQLitePragmas(config interface{}) *ConnectionManager_ApplySQLitePragmas_Call {
	return &ConnectionManager_ApplySQLitePragmas_Call{Call: _e.mock.On("ApplySQLitePragmas", config)}
}

func (_c *ConnectionManager_ApplySQLitePragmas_Call) Run(run func(config common.SqliteConfig)) *ConnectionManager_ApplySQLitePragmas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 common.SqliteConfig
		if args[0] != nil {
			arg0 = args[0].(common.SqliteConfig)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectionManager_ApplySQLitePragmas_Call) Return(err error) *ConnectionManager_ApplySQLitePragmas_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ConnectionManager_ApplySQLitePragmas_Call) RunAndReturn(run func(config common.SqliteConfig) error) *ConnectionManager_ApplySQLitePragmas_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type ConnectionManager
func (_mock *ConnectionManager) Commit(session *gorm.DB) {
	_mock.Called(session)
	return
}

// ConnectionManager_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type ConnectionManager_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - session *gorm.DB
func (_e *ConnectionManager_Expecter) Commit(session interface{}) *ConnectionManager_Commit_Call {
	return &ConnectionManager_Commit_Call{Call: _e.mock.On("Commit", session)}
}

func (_c *ConnectionManager_Commit_Call) Run(run func(session *gorm.DB)) *ConnectionManager_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gorm.DB
		if args[0] != nil {
			arg0 = args[0].(*gorm.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectionManager_Commit_Call) Return() *ConnectionManager_Commit_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectionManager_Commit_Call) RunAndReturn(run func(session *gorm.DB)) *ConnectionManager_Commit_Call {
	_c.Run(run)
	return _c
}

// NewPersistanceManager provides a mock function for the type ConnectionManager
func (_mock *ConnectionManager) NewPersistanceManager() db.PersistenceManager {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewPersistanceManager")
	}

	var r0 db.PersistenceManager
	if returnFunc, ok := ret.Get(0).(func() db.PersistenceManager); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(db.PersistenceManager)
		}
	}
	return r0
}

// ConnectionManager_NewPersistanceManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewPersistanceManager'
type ConnectionManager_NewPersistanceManager_Call struct {
	*mock.Call
}

// NewPersistanceManager is a helper method to define mock.On call
func (_e *ConnectionManager_Expecter) NewPersistanceManager() *ConnectionManager_NewPersistanceManager_Call {
	return &ConnectionManager_NewPersistanceManager_Call{Call: _e.mock.On("NewPersistanceManager")}
}

func (_c *ConnectionManager_NewPersistanceManager_Call) Run(run func()) *ConnectionManager_NewPersistanceManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectionManager_NewPersistanceManager_Call) Return(persistenceManager db.PersistenceManager) *ConnectionManager_NewPersistanceManager_Call {
	_c.Call.Return(persistenceManager)
	return _c
}

func (_c *ConnectionManager_NewPersistanceManager_Call) RunAndReturn(run func() db.PersistenceManager) *ConnectionManager_NewPersistanceManager_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransaction provides a mock function for the type ConnectionManager
func (_mock *ConnectionManager) NewTransaction() *gorm.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for NewTransaction")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// ConnectionManager_NewTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewTransaction'
type ConnectionManager_NewTransaction_Call struct {
	*mock.Call
}

// NewTransaction is a helper method to define mock.On call
func (_e *ConnectionManager_Expecter) NewTransaction() *ConnectionManager_NewTransaction_Call {
	return &ConnectionManager_NewTransaction_Call{Call: _e.mock.On("NewTransaction")}
}

func (_c *ConnectionManager_NewTransaction_Call) Run(run func()) *ConnectionManager_NewTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectionManager_NewTransaction_Call) Return(dB *gorm.DB) *ConnectionManager_NewTransaction_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *ConnectionManager_NewTransaction_Call) RunAndReturn(run func() *gorm.DB) *ConnectionManager_NewTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type ConnectionManager
func (_mock *ConnectionManager) Rollback(session *gorm.DB) {
	_mock.Called(session)
	return
}

// ConnectionManager_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type ConnectionManager_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - session *gorm.DB
func (_e *ConnectionManager_Expecter) Rollback(session interface{}) *ConnectionManager_Rollback_Call {
	return &ConnectionManager_Rollback_Call{Call: _e.mock.On("Rollback", session)}
}

func (_c *ConnectionManager_Rollback_Call) Run(run func(session *gorm.DB)) *ConnectionManager_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gorm.DB
		if args[0] != nil {
			arg0 = args[0].(*gorm.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ConnectionManager_Rollback_Call) Return() *ConnectionManager_Rollback_Call {
	_c.Call.Return()
	return _c
}

func (_c *ConnectionManager_Rollback_Call) RunAndReturn(run func(session *gorm.DB)) *ConnectionManager_Rollback_Call {
	_c.Run(run)
	return _c
}

// NewPersistenceManager creates a new instance of PersistenceManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPersistenceManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *PersistenceManager {
	mock := &PersistenceManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// PersistenceManager is an autogenerated mock type for the PersistenceManager type
type PersistenceManager struct {
	mock.Mock
}

type PersistenceManager_Expecter struct {
	mock *mock.Mock
}

func (_m *PersistenceManager) EXPECT() *PersistenceManager_Expecter {
	return &PersistenceManager_Expecter{mock: &_m.Mock}
}

// BulkDeleteLiveStreamSegment provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) BulkDeleteLiveStreamSegment(ctxt context.Context, ids []string) error {
	ret := _mock.Called(ctxt, ids)

	if len(ret) == 0 {
		panic("no return value specified for BulkDeleteLiveStreamSegment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctxt, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_BulkDeleteLiveStreamSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkDeleteLiveStreamSegment'
type PersistenceManager_BulkDeleteLiveStreamSegment_Call struct {
	*mock.Call
}

// BulkDeleteLiveStreamSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - ids []string
func (_e *PersistenceManager_Expecter) BulkDeleteLiveStreamSegment(ctxt interface{}, ids interface{}) *PersistenceManager_BulkDeleteLiveStreamSegment_Call {
	return &PersistenceManager_BulkDeleteLiveStreamSegment_Call{Call: _e.mock.On("BulkDeleteLiveStreamSegment", ctxt, ids)}
}

func (_c *PersistenceManager_BulkDeleteLiveStreamSegment_Call) Run(run func(ctxt context.Context, ids []string)) *PersistenceManager_BulkDeleteLiveStreamSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_BulkDeleteLiveStreamSegment_Call) Return(err error) *PersistenceManager_BulkDeleteLiveStreamSegment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_BulkDeleteLiveStreamSegment_Call) RunAndReturn(run func(ctxt context.Context, ids []string) error) *PersistenceManager_BulkDeleteLiveStreamSegment_Call {
	_c.Call.Return(run)
	return _c
}

// BulkRegisterLiveStreamSegments provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) BulkRegisterLiveStreamSegments(ctxt context.Context, sourceID string, segments []hls.Segment) (map[string]string, error) {
	ret := _mock.Called(ctxt, sourceID, segments)

	if len(ret) == 0 {
		panic("no return value specified for BulkRegisterLiveStreamSegments")
	}

	var r0 map[string]string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []hls.Segment) (map[string]string, error)); ok {
		return returnFunc(ctxt, sourceID, segments)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []hls.Segment) map[string]string); ok {
		r0 = returnFunc(ctxt, sourceID, segments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []hls.Segment) error); ok {
		r1 = returnFunc(ctxt, sourceID, segments)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_BulkRegisterLiveStreamSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkRegisterLiveStreamSegments'
type PersistenceManager_BulkRegisterLiveStreamSegments_Call struct {
	*mock.Call
}

// BulkRegisterLiveStreamSegments is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - segments []hls.Segment
func (_e *PersistenceManager_Expecter) BulkRegisterLiveStreamSegments(ctxt interface{}, sourceID interface{}, segments interface{}) *PersistenceManager_BulkRegisterLiveStreamSegments_Call {
	return &PersistenceManager_BulkRegisterLiveStreamSegments_Call{Call: _e.mock.On("BulkRegisterLiveStreamSegments", ctxt, sourceID, segments)}
}

func (_c *PersistenceManager_BulkRegisterLiveStreamSegments_Call) Run(run func(ctxt context.Context, sourceID string, segments []hls.Segment)) *PersistenceManager_BulkRegisterLiveStreamSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []hls.Segment
		if args[2] != nil {
			arg2 = args[2].([]hls.Segment)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PersistenceManager_BulkRegisterLiveStreamSegments_Call) Return(stringToString map[string]string, err error) *PersistenceManager_BulkRegisterLiveStreamSegments_Call {
	_c.Call.Return(stringToString, err)
	return _c
}

func (_c *PersistenceManager_BulkRegisterLiveStreamSegments_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, segments []hls.Segment) (map[string]string, error)) *PersistenceManager_BulkRegisterLiveStreamSegments_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeVideoSourceStreamState provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) ChangeVideoSourceStreamState(ctxt context.Context, id string, streaming int) error {
	ret := _mock.Called(ctxt, id, streaming)

	if len(ret) == 0 {
		panic("no return value specified for ChangeVideoSourceStreamState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = returnFunc(ctxt, id, streaming)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_ChangeVideoSourceStreamState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeVideoSourceStreamState'
type PersistenceManager_ChangeVideoSourceStreamState_Call struct {
	*mock.Call
}

// ChangeVideoSourceStreamState is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - streaming int
func (_e *PersistenceManager_Expecter) ChangeVideoSourceStreamState(ctxt interface{}, id interface{}, streaming interface{}) *PersistenceManager_ChangeVideoSourceStreamState_Call {
	return &PersistenceManager_ChangeVideoSourceStreamState_Call{Call: _e.mock.On("ChangeVideoSourceStreamState", ctxt, id, streaming)}
}

func (_c *PersistenceManager_ChangeVideoSourceStreamState_Call) Run(run func(ctxt context.Context, id string, streaming int)) *PersistenceManager_ChangeVideoSourceStreamState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PersistenceManager_ChangeVideoSourceStreamState_Call) Return(err error) *PersistenceManager_ChangeVideoSourceStreamState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_ChangeVideoSourceStreamState_Call) RunAndReturn(run func(ctxt context.Context, id string, streaming int) error) *PersistenceManager_ChangeVideoSourceStreamState_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) Close() {
	_mock.Called()
	return
}

// PersistenceManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type PersistenceManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *PersistenceManager_Expecter) Close() *PersistenceManager_Close_Call {
	return &PersistenceManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *PersistenceManager_Close_Call) Run(run func()) *PersistenceManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PersistenceManager_Close_Call) Return() *PersistenceManager_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *PersistenceManager_Close_Call) RunAndReturn(run func()) *PersistenceManager_Close_Call {
	_c.Run(run)
	return _c
}

// DefineRecordingSession provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) DefineRecordingSession(ctxt context.Context, sourceID string, alias *string, description *string, startTime time.Time) (string, error) {
	ret := _mock.Called(ctxt, sourceID, alias, description, startTime)

	if len(ret) == 0 {
		panic("no return value specified for DefineRecordingSession")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, *string, time.Time) (string, error)); ok {
		return returnFunc(ctxt, sourceID, alias, description, startTime)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, *string, time.Time) string); ok {
		r0 = returnFunc(ctxt, sourceID, alias, description, startTime)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string, *string, time.Time) error); ok {
		r1 = returnFunc(ctxt, sourceID, alias, description, startTime)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_DefineRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefineRecordingSession'
type PersistenceManager_DefineRecordingSession_Call struct {
	*mock.Call
}

// DefineRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - alias *string
//   - description *string
//   - startTime time.Time
func (_e *PersistenceManager_Expecter) DefineRecordingSession(ctxt interface{}, sourceID interface{}, alias interface{}, description interface{}, startTime interface{}) *PersistenceManager_DefineRecordingSession_Call {
	return &PersistenceManager_DefineRecordingSession_Call{Call: _e.mock.On("DefineRecordingSession", ctxt, sourceID, alias, description, startTime)}
}

func (_c *PersistenceManager_DefineRecordingSession_Call) Run(run func(ctxt context.Context, sourceID string, alias *string, description *string, startTime time.Time)) *PersistenceManager_DefineRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 time.Time
		if args[4] != nil {
			arg4 = args[4].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *PersistenceManager_DefineRecordingSession_Call) Return(s string, err error) *PersistenceManager_DefineRecordingSession_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *PersistenceManager_DefineRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, alias *string, description *string, startTime time.Time) (string, error)) *PersistenceManager_DefineRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// DefineVideoSource provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) DefineVideoSource(ctxt context.Context, name string, segmentLen int, playlistURI *string, description *string) (string, error) {
	ret := _mock.Called(ctxt, name, segmentLen, playlistURI, description)

	if len(ret) == 0 {
		panic("no return value specified for DefineVideoSource")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, *string, *string) (string, error)); ok {
		return returnFunc(ctxt, name, segmentLen, playlistURI, description)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, *string, *string) string); ok {
		r0 = returnFunc(ctxt, name, segmentLen, playlistURI, description)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, *string, *string) error); ok {
		r1 = returnFunc(ctxt, name, segmentLen, playlistURI, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_DefineVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefineVideoSource'
type PersistenceManager_DefineVideoSource_Call struct {
	*mock.Call
}

// DefineVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - name string
//   - segmentLen int
//   - playlistURI *string
//   - description *string
func (_e *PersistenceManager_Expecter) DefineVideoSource(ctxt interface{}, name interface{}, segmentLen interface{}, playlistURI interface{}, description interface{}) *PersistenceManager_DefineVideoSource_Call {
	return &PersistenceManager_DefineVideoSource_Call{Call: _e.mock.On("DefineVideoSource", ctxt, name, segmentLen, playlistURI, description)}
}

func (_c *PersistenceManager_DefineVideoSource_Call) Run(run func(ctxt context.Context, name string, segmentLen int, playlistURI *string, description *string)) *PersistenceManager_DefineVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *PersistenceManager_DefineVideoSource_Call) Return(s string, err error) *PersistenceManager_DefineVideoSource_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *PersistenceManager_DefineVideoSource_Call) RunAndReturn(run func(ctxt context.Context, name string, segmentLen int, playlistURI *string, description *string) (string, error)) *PersistenceManager_DefineVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLiveStreamSegment provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) DeleteLiveStreamSegment(ctxt context.Context, id string) error {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLiveStreamSegment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_DeleteLiveStreamSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLiveStreamSegment'
type PersistenceManager_DeleteLiveStreamSegment_Call struct {
	*mock.Call
}

// DeleteLiveStreamSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *PersistenceManager_Expecter) DeleteLiveStreamSegment(ctxt interface{}, id interface{}) *PersistenceManager_DeleteLiveStreamSegment_Call {
	return &PersistenceManager_DeleteLiveStreamSegment_Call{Call: _e.mock.On("DeleteLiveStreamSegment", ctxt, id)}
}

func (_c *PersistenceManager_DeleteLiveStreamSegment_Call) Run(run func(ctxt context.Context, id string)) *PersistenceManager_DeleteLiveStreamSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_DeleteLiveStreamSegment_Call) Return(err error) *PersistenceManager_DeleteLiveStreamSegment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_DeleteLiveStreamSegment_Call) RunAndReturn(run func(ctxt context.Context, id string) error) *PersistenceManager_DeleteLiveStreamSegment_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOldLiveStreamSegments provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) DeleteOldLiveStreamSegments(ctxt context.Context, timeLimit time.Time) error {
	ret := _mock.Called(ctxt, timeLimit)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOldLiveStreamSegments")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) error); ok {
		r0 = returnFunc(ctxt, timeLimit)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_DeleteOldLiveStreamSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOldLiveStreamSegments'
type PersistenceManager_DeleteOldLiveStreamSegments_Call struct {
	*mock.Call
}

// DeleteOldLiveStreamSegments is a helper method to define mock.On call
//   - ctxt context.Context
//   - timeLimit time.Time
func (_e *PersistenceManager_Expecter) DeleteOldLiveStreamSegments(ctxt interface{}, timeLimit interface{}) *PersistenceManager_DeleteOldLiveStreamSegments_Call {
	return &PersistenceManager_DeleteOldLiveStreamSegments_Call{Call: _e.mock.On("DeleteOldLiveStreamSegments", ctxt, timeLimit)}
}

func (_c *PersistenceManager_DeleteOldLiveStreamSegments_Call) Run(run func(ctxt context.Context, timeLimit time.Time)) *PersistenceManager_DeleteOldLiveStreamSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_DeleteOldLiveStreamSegments_Call) Return(err error) *PersistenceManager_DeleteOldLiveStreamSegments_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_DeleteOldLiveStreamSegments_Call) RunAndReturn(run func(ctxt context.Context, timeLimit time.Time) error) *PersistenceManager_DeleteOldLiveStreamSegments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRecordingSession provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) DeleteRecordingSession(ctxt context.Context, id string) error {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_DeleteRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRecordingSession'
type PersistenceManager_DeleteRecordingSession_Call struct {
	*mock.Call
}

// DeleteRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *PersistenceManager_Expecter) DeleteRecordingSession(ctxt interface{}, id interface{}) *PersistenceManager_DeleteRecordingSession_Call {
	return &PersistenceManager_DeleteRecordingSession_Call{Call: _e.mock.On("DeleteRecordingSession", ctxt, id)}
}

func (_c *PersistenceManager_DeleteRecordingSession_Call) Run(run func(ctxt context.Context, id string)) *PersistenceManager_DeleteRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_DeleteRecordingSession_Call) Return(err error) *PersistenceManager_DeleteRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_DeleteRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, id string) error) *PersistenceManager_DeleteRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUnassociatedRecordingSegments provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) DeleteUnassociatedRecordingSegments(ctxt context.Context) ([]common.VideoSegment, error) {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUnassociatedRecordingSegments")
	}

	var r0 []common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]common.VideoSegment, error)); ok {
		return returnFunc(ctxt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []common.VideoSegment); ok {
		r0 = returnFunc(ctxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSegment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctxt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_DeleteUnassociatedRecordingSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUnassociatedRecordingSegments'
type PersistenceManager_DeleteUnassociatedRecordingSegments_Call struct {
	*mock.Call
}

// DeleteUnassociatedRecordingSegments is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *PersistenceManager_Expecter) DeleteUnassociatedRecordingSegments(ctxt interface{}) *PersistenceManager_DeleteUnassociatedRecordingSegments_Call {
	return &PersistenceManager_DeleteUnassociatedRecordingSegments_Call{Call: _e.mock.On("DeleteUnassociatedRecordingSegments", ctxt)}
}

func (_c *PersistenceManager_DeleteUnassociatedRecordingSegments_Call) Run(run func(ctxt context.Context)) *PersistenceManager_DeleteUnassociatedRecordingSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PersistenceManager_DeleteUnassociatedRecordingSegments_Call) Return(videoSegments []common.VideoSegment, err error) *PersistenceManager_DeleteUnassociatedRecordingSegments_Call {
	_c.Call.Return(videoSegments, err)
	return _c
}

func (_c *PersistenceManager_DeleteUnassociatedRecordingSegments_Call) RunAndReturn(run func(ctxt context.Context) ([]common.VideoSegment, error)) *PersistenceManager_DeleteUnassociatedRecordingSegments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVideoSource provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) DeleteVideoSource(ctxt context.Context, id string) error {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVideoSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_DeleteVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVideoSource'
type PersistenceManager_DeleteVideoSource_Call struct {
	*mock.Call
}

// DeleteVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *PersistenceManager_Expecter) DeleteVideoSource(ctxt interface{}, id interface{}) *PersistenceManager_DeleteVideoSource_Call {
	return &PersistenceManager_DeleteVideoSource_Call{Call: _e.mock.On("DeleteVideoSource", ctxt, id)}
}

func (_c *PersistenceManager_DeleteVideoSource_Call) Run(run func(ctxt context.Context, id string)) *PersistenceManager_DeleteVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_DeleteVideoSource_Call) Return(err error) *PersistenceManager_DeleteVideoSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_DeleteVideoSource_Call) RunAndReturn(run func(ctxt context.Context, id string) error) *PersistenceManager_DeleteVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// Error provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) Error() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type PersistenceManager_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *PersistenceManager_Expecter) Error() *PersistenceManager_Error_Call {
	return &PersistenceManager_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *PersistenceManager_Error_Call) Run(run func()) *PersistenceManager_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PersistenceManager_Error_Call) Return(err error) *PersistenceManager_Error_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_Error_Call) RunAndReturn(run func() error) *PersistenceManager_Error_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestLiveStreamSegments provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetLatestLiveStreamSegments(ctxt context.Context, sourceID string, count int) ([]common.VideoSegment, error) {
	ret := _mock.Called(ctxt, sourceID, count)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestLiveStreamSegments")
	}

	var r0 []common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) ([]common.VideoSegment, error)); ok {
		return returnFunc(ctxt, sourceID, count)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) []common.VideoSegment); ok {
		r0 = returnFunc(ctxt, sourceID, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSegment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = returnFunc(ctxt, sourceID, count)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetLatestLiveStreamSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestLiveStreamSegments'
type PersistenceManager_GetLatestLiveStreamSegments_Call struct {
	*mock.Call
}

// GetLatestLiveStreamSegments is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - count int
func (_e *PersistenceManager_Expecter) GetLatestLiveStreamSegments(ctxt interface{}, sourceID interface{}, count interface{}) *PersistenceManager_GetLatestLiveStreamSegments_Call {
	return &PersistenceManager_GetLatestLiveStreamSegments_Call{Call: _e.mock.On("GetLatestLiveStreamSegments", ctxt, sourceID, count)}
}

func (_c *PersistenceManager_GetLatestLiveStreamSegments_Call) Run(run func(ctxt context.Context, sourceID string, count int)) *PersistenceManager_GetLatestLiveStreamSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetLatestLiveStreamSegments_Call) Return(videoSegments []common.VideoSegment, err error) *PersistenceManager_GetLatestLiveStreamSegments_Call {
	_c.Call.Return(videoSegments, err)
	return _c
}

func (_c *PersistenceManager_GetLatestLiveStreamSegments_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, count int) ([]common.VideoSegment, error)) *PersistenceManager_GetLatestLiveStreamSegments_Call {
	_c.Call.Return(run)
	return _c
}

// GetLiveStreamSegment provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetLiveStreamSegment(ctxt context.Context, id string) (common.VideoSegment, error) {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLiveStreamSegment")
	}

	var r0 common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.VideoSegment, error)); ok {
		return returnFunc(ctxt, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.VideoSegment); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Get(0).(common.VideoSegment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetLiveStreamSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLiveStreamSegment'
type PersistenceManager_GetLiveStreamSegment_Call struct {
	*mock.Call
}

// GetLiveStreamSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *PersistenceManager_Expecter) GetLiveStreamSegment(ctxt interface{}, id interface{}) *PersistenceManager_GetLiveStreamSegment_Call {
	return &PersistenceManager_GetLiveStreamSegment_Call{Call: _e.mock.On("GetLiveStreamSegment", ctxt, id)}
}

func (_c *PersistenceManager_GetLiveStreamSegment_Call) Run(run func(ctxt context.Context, id string)) *PersistenceManager_GetLiveStreamSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetLiveStreamSegment_Call) Return(videoSegment common.VideoSegment, err error) *PersistenceManager_GetLiveStreamSegment_Call {
	_c.Call.Return(videoSegment, err)
	return _c
}

func (_c *PersistenceManager_GetLiveStreamSegment_Call) RunAndReturn(run func(ctxt context.Context, id string) (common.VideoSegment, error)) *PersistenceManager_GetLiveStreamSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetLiveStreamSegmentByName provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetLiveStreamSegmentByName(ctxt context.Context, name string) (common.VideoSegment, error) {
	ret := _mock.Called(ctxt, name)

	if len(ret) == 0 {
		panic("no return value specified for GetLiveStreamSegmentByName")
	}

	var r0 common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.VideoSegment, error)); ok {
		return returnFunc(ctxt, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.VideoSegment); ok {
		r0 = returnFunc(ctxt, name)
	} else {
		r0 = ret.Get(0).(common.VideoSegment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetLiveStreamSegmentByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLiveStreamSegmentByName'
type PersistenceManager_GetLiveStreamSegmentByName_Call struct {
	*mock.Call
}

// GetLiveStreamSegmentByName is a helper method to define mock.On call
//   - ctxt context.Context
//   - name string
func (_e *PersistenceManager_Expecter) GetLiveStreamSegmentByName(ctxt interface{}, name interface{}) *PersistenceManager_GetLiveStreamSegmentByName_Call {
	return &PersistenceManager_GetLiveStreamSegmentByName_Call{Call: _e.mock.On("GetLiveStreamSegmentByName", ctxt, name)}
}

func (_c *PersistenceManager_GetLiveStreamSegmentByName_Call) Run(run func(ctxt context.Context, name string)) *PersistenceManager_GetLiveStreamSegmentByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetLiveStreamSegmentByName_Call) Return(videoSegment common.VideoSegment, err error) *PersistenceManager_GetLiveStreamSegmentByName_Call {
	_c.Call.Return(videoSegment, err)
	return _c
}

func (_c *PersistenceManager_GetLiveStreamSegmentByName_Call) RunAndReturn(run func(ctxt context.Context, name string) (common.VideoSegment, error)) *PersistenceManager_GetLiveStreamSegmentByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingSegment provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetRecordingSegment(ctxt context.Context, id string) (common.VideoSegment, error) {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordingSegment")
	}

	var r0 common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.VideoSegment, error)); ok {
		return returnFunc(ctxt, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.VideoSegment); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Get(0).(common.VideoSegment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetRecordingSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingSegment'
type PersistenceManager_GetRecordingSegment_Call struct {
	*mock.Call
}

// GetRecordingSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *PersistenceManager_Expecter) GetRecordingSegment(ctxt interface{}, id interface{}) *PersistenceManager_GetRecordingSegment_Call {
	return &PersistenceManager_GetRecordingSegment_Call{Call: _e.mock.On("GetRecordingSegment", ctxt, id)}
}

func (_c *PersistenceManager_GetRecordingSegment_Call) Run(run func(ctxt context.Context, id string)) *PersistenceManager_GetRecordingSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetRecordingSegment_Call) Return(videoSegment common.VideoSegment, err error) *PersistenceManager_GetRecordingSegment_Call {
	_c.Call.Return(videoSegment, err)
	return _c
}

func (_c *PersistenceManager_GetRecordingSegment_Call) RunAndReturn(run func(ctxt context.Context, id string) (common.VideoSegment, error)) *PersistenceManager_GetRecordingSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingSegmentByName provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetRecordingSegmentByName(ctxt context.Context, name string) (common.VideoSegment, error) {
	ret := _mock.Called(ctxt, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordingSegmentByName")
	}

	var r0 common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.VideoSegment, error)); ok {
		return returnFunc(ctxt, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.VideoSegment); ok {
		r0 = returnFunc(ctxt, name)
	} else {
		r0 = ret.Get(0).(common.VideoSegment)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetRecordingSegmentByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingSegmentByName'
type PersistenceManager_GetRecordingSegmentByName_Call struct {
	*mock.Call
}

// GetRecordingSegmentByName is a helper method to define mock.On call
//   - ctxt context.Context
//   - name string
func (_e *PersistenceManager_Expecter) GetRecordingSegmentByName(ctxt interface{}, name interface{}) *PersistenceManager_GetRecordingSegmentByName_Call {
	return &PersistenceManager_GetRecordingSegmentByName_Call{Call: _e.mock.On("GetRecordingSegmentByName", ctxt, name)}
}

func (_c *PersistenceManager_GetRecordingSegmentByName_Call) Run(run func(ctxt context.Context, name string)) *PersistenceManager_GetRecordingSegmentByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetRecordingSegmentByName_Call) Return(videoSegment common.VideoSegment, err error) *PersistenceManager_GetRecordingSegmentByName_Call {
	_c.Call.Return(videoSegment, err)
	return _c
}

func (_c *PersistenceManager_GetRecordingSegmentByName_Call) RunAndReturn(run func(ctxt context.Context, name string) (common.VideoSegment, error)) *PersistenceManager_GetRecordingSegmentByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingSession provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetRecordingSession(ctxt context.Context, id string) (common.Recording, error) {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordingSession")
	}

	var r0 common.Recording
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.Recording, error)); ok {
		return returnFunc(ctxt, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.Recording); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Get(0).(common.Recording)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingSession'
type PersistenceManager_GetRecordingSession_Call struct {
	*mock.Call
}

// GetRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *PersistenceManager_Expecter) GetRecordingSession(ctxt interface{}, id interface{}) *PersistenceManager_GetRecordingSession_Call {
	return &PersistenceManager_GetRecordingSession_Call{Call: _e.mock.On("GetRecordingSession", ctxt, id)}
}

func (_c *PersistenceManager_GetRecordingSession_Call) Run(run func(ctxt context.Context, id string)) *PersistenceManager_GetRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetRecordingSession_Call) Return(recording common.Recording, err error) *PersistenceManager_GetRecordingSession_Call {
	_c.Call.Return(recording, err)
	return _c
}

func (_c *PersistenceManager_GetRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, id string) (common.Recording, error)) *PersistenceManager_GetRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingSessionByAlias provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetRecordingSessionByAlias(ctxt context.Context, alias string) (common.Recording, error) {
	ret := _mock.Called(ctxt, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordingSessionByAlias")
	}

	var r0 common.Recording
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.Recording, error)); ok {
		return returnFunc(ctxt, alias)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.Recording); ok {
		r0 = returnFunc(ctxt, alias)
	} else {
		r0 = ret.Get(0).(common.Recording)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, alias)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetRecordingSessionByAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingSessionByAlias'
type PersistenceManager_GetRecordingSessionByAlias_Call struct {
	*mock.Call
}

// GetRecordingSessionByAlias is a helper method to define mock.On call
//   - ctxt context.Context
//   - alias string
func (_e *PersistenceManager_Expecter) GetRecordingSessionByAlias(ctxt interface{}, alias interface{}) *PersistenceManager_GetRecordingSessionByAlias_Call {
	return &PersistenceManager_GetRecordingSessionByAlias_Call{Call: _e.mock.On("GetRecordingSessionByAlias", ctxt, alias)}
}

func (_c *PersistenceManager_GetRecordingSessionByAlias_Call) Run(run func(ctxt context.Context, alias string)) *PersistenceManager_GetRecordingSessionByAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetRecordingSessionByAlias_Call) Return(recording common.Recording, err error) *PersistenceManager_GetRecordingSessionByAlias_Call {
	_c.Call.Return(recording, err)
	return _c
}

func (_c *PersistenceManager_GetRecordingSessionByAlias_Call) RunAndReturn(run func(ctxt context.Context, alias string) (common.Recording, error)) *PersistenceManager_GetRecordingSessionByAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetVideoSource provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetVideoSource(ctxt context.Context, id string) (common.VideoSource, error) {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVideoSource")
	}

	var r0 common.VideoSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.VideoSource, error)); ok {
		return returnFunc(ctxt, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.VideoSource); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Get(0).(common.VideoSource)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVideoSource'
type PersistenceManager_GetVideoSource_Call struct {
	*mock.Call
}

// GetVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *PersistenceManager_Expecter) GetVideoSource(ctxt interface{}, id interface{}) *PersistenceManager_GetVideoSource_Call {
	return &PersistenceManager_GetVideoSource_Call{Call: _e.mock.On("GetVideoSource", ctxt, id)}
}

func (_c *PersistenceManager_GetVideoSource_Call) Run(run func(ctxt context.Context, id string)) *PersistenceManager_GetVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetVideoSource_Call) Return(videoSource common.VideoSource, err error) *PersistenceManager_GetVideoSource_Call {
	_c.Call.Return(videoSource, err)
	return _c
}

func (_c *PersistenceManager_GetVideoSource_Call) RunAndReturn(run func(ctxt context.Context, id string) (common.VideoSource, error)) *PersistenceManager_GetVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetVideoSourceByName provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) GetVideoSourceByName(ctxt context.Context, name string) (common.VideoSource, error) {
	ret := _mock.Called(ctxt, name)

	if len(ret) == 0 {
		panic("no return value specified for GetVideoSourceByName")
	}

	var r0 common.VideoSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.VideoSource, error)); ok {
		return returnFunc(ctxt, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.VideoSource); ok {
		r0 = returnFunc(ctxt, name)
	} else {
		r0 = ret.Get(0).(common.VideoSource)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_GetVideoSourceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVideoSourceByName'
type PersistenceManager_GetVideoSourceByName_Call struct {
	*mock.Call
}

// GetVideoSourceByName is a helper method to define mock.On call
//   - ctxt context.Context
//   - name string
func (_e *PersistenceManager_Expecter) GetVideoSourceByName(ctxt interface{}, name interface{}) *PersistenceManager_GetVideoSourceByName_Call {
	return &PersistenceManager_GetVideoSourceByName_Call{Call: _e.mock.On("GetVideoSourceByName", ctxt, name)}
}

func (_c *PersistenceManager_GetVideoSourceByName_Call) Run(run func(ctxt context.Context, name string)) *PersistenceManager_GetVideoSourceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_GetVideoSourceByName_Call) Return(videoSource common.VideoSource, err error) *PersistenceManager_GetVideoSourceByName_Call {
	_c.Call.Return(videoSource, err)
	return _c
}

func (_c *PersistenceManager_GetVideoSourceByName_Call) RunAndReturn(run func(ctxt context.Context, name string) (common.VideoSource, error)) *PersistenceManager_GetVideoSourceByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllLiveStreamSegments provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) ListAllLiveStreamSegments(ctxt context.Context, sourceID string) ([]common.VideoSegment, error) {
	ret := _mock.Called(ctxt, sourceID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllLiveStreamSegments")
	}

	var r0 []common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]common.VideoSegment, error)); ok {
		return returnFunc(ctxt, sourceID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []common.VideoSegment); ok {
		r0 = returnFunc(ctxt, sourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSegment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, sourceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_ListAllLiveStreamSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllLiveStreamSegments'
type PersistenceManager_ListAllLiveStreamSegments_Call struct {
	*mock.Call
}

// ListAllLiveStreamSegments is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
func (_e *PersistenceManager_Expecter) ListAllLiveStreamSegments(ctxt interface{}, sourceID interface{}) *PersistenceManager_ListAllLiveStreamSegments_Call {
	return &PersistenceManager_ListAllLiveStreamSegments_Call{Call: _e.mock.On("ListAllLiveStreamSegments", ctxt, sourceID)}
}

func (_c *PersistenceManager_ListAllLiveStreamSegments_Call) Run(run func(ctxt context.Context, sourceID string)) *PersistenceManager_ListAllLiveStreamSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_ListAllLiveStreamSegments_Call) Return(videoSegments []common.VideoSegment, err error) *PersistenceManager_ListAllLiveStreamSegments_Call {
	_c.Call.Return(videoSegments, err)
	return _c
}

func (_c *PersistenceManager_ListAllLiveStreamSegments_Call) RunAndReturn(run func(ctxt context.Context, sourceID string) ([]common.VideoSegment, error)) *PersistenceManager_ListAllLiveStreamSegments_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllLiveStreamSegmentsAfterTime provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) ListAllLiveStreamSegmentsAfterTime(ctxt context.Context, sourceID string, timestamp time.Time) ([]common.VideoSegment, error) {
	ret := _mock.Called(ctxt, sourceID, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for ListAllLiveStreamSegmentsAfterTime")
	}

	var r0 []common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) ([]common.VideoSegment, error)); ok {
		return returnFunc(ctxt, sourceID, timestamp)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) []common.VideoSegment); ok {
		r0 = returnFunc(ctxt, sourceID, timestamp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSegment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = returnFunc(ctxt, sourceID, timestamp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllLiveStreamSegmentsAfterTime'
type PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call struct {
	*mock.Call
}

// ListAllLiveStreamSegmentsAfterTime is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - timestamp time.Time
func (_e *PersistenceManager_Expecter) ListAllLiveStreamSegmentsAfterTime(ctxt interface{}, sourceID interface{}, timestamp interface{}) *PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call {
	return &PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call{Call: _e.mock.On("ListAllLiveStreamSegmentsAfterTime", ctxt, sourceID, timestamp)}
}

func (_c *PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call) Run(run func(ctxt context.Context, sourceID string, timestamp time.Time)) *PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call) Return(videoSegments []common.VideoSegment, err error) *PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call {
	_c.Call.Return(videoSegments, err)
	return _c
}

func (_c *PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, timestamp time.Time) ([]common.VideoSegment, error)) *PersistenceManager_ListAllLiveStreamSegmentsAfterTime_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllRecordingSegments provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) ListAllRecordingSegments(ctxt context.Context) ([]common.VideoSegment, error) {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for ListAllRecordingSegments")
	}

	var r0 []common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]common.VideoSegment, error)); ok {
		return returnFunc(ctxt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []common.VideoSegment); ok {
		r0 = returnFunc(ctxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSegment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctxt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_ListAllRecordingSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllRecordingSegments'
type PersistenceManager_ListAllRecordingSegments_Call struct {
	*mock.Call
}

// ListAllRecordingSegments is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *PersistenceManager_Expecter) ListAllRecordingSegments(ctxt interface{}) *PersistenceManager_ListAllRecordingSegments_Call {
	return &PersistenceManager_ListAllRecordingSegments_Call{Call: _e.mock.On("ListAllRecordingSegments", ctxt)}
}

func (_c *PersistenceManager_ListAllRecordingSegments_Call) Run(run func(ctxt context.Context)) *PersistenceManager_ListAllRecordingSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PersistenceManager_ListAllRecordingSegments_Call) Return(videoSegments []common.VideoSegment, err error) *PersistenceManager_ListAllRecordingSegments_Call {
	_c.Call.Return(videoSegments, err)
	return _c
}

func (_c *PersistenceManager_ListAllRecordingSegments_Call) RunAndReturn(run func(ctxt context.Context) ([]common.VideoSegment, error)) *PersistenceManager_ListAllRecordingSegments_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllSegmentsOfRecording provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) ListAllSegmentsOfRecording(ctxt context.Context, recordingID string) ([]common.VideoSegment, error) {
	ret := _mock.Called(ctxt, recordingID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllSegmentsOfRecording")
	}

	var r0 []common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]common.VideoSegment, error)); ok {
		return returnFunc(ctxt, recordingID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []common.VideoSegment); ok {
		r0 = returnFunc(ctxt, recordingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSegment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, recordingID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_ListAllSegmentsOfRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllSegmentsOfRecording'
type PersistenceManager_ListAllSegmentsOfRecording_Call struct {
	*mock.Call
}

// ListAllSegmentsOfRecording is a helper method to define mock.On call
//   - ctxt context.Context
//   - recordingID string
func (_e *PersistenceManager_Expecter) ListAllSegmentsOfRecording(ctxt interface{}, recordingID interface{}) *PersistenceManager_ListAllSegmentsOfRecording_Call {
	return &PersistenceManager_ListAllSegmentsOfRecording_Call{Call: _e.mock.On("ListAllSegmentsOfRecording", ctxt, recordingID)}
}

func (_c *PersistenceManager_ListAllSegmentsOfRecording_Call) Run(run func(ctxt context.Context, recordingID string)) *PersistenceManager_ListAllSegmentsOfRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_ListAllSegmentsOfRecording_Call) Return(videoSegments []common.VideoSegment, err error) *PersistenceManager_ListAllSegmentsOfRecording_Call {
	_c.Call.Return(videoSegments, err)
	return _c
}

func (_c *PersistenceManager_ListAllSegmentsOfRecording_Call) RunAndReturn(run func(ctxt context.Context, recordingID string) ([]common.VideoSegment, error)) *PersistenceManager_ListAllSegmentsOfRecording_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecordingSessions provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) ListRecordingSessions(ctxt context.Context) ([]common.Recording, error) {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for ListRecordingSessions")
	}

	var r0 []common.Recording
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]common.Recording, error)); ok {
		return returnFunc(ctxt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []common.Recording); ok {
		r0 = returnFunc(ctxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Recording)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctxt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_ListRecordingSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecordingSessions'
type PersistenceManager_ListRecordingSessions_Call struct {
	*mock.Call
}

// ListRecordingSessions is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *PersistenceManager_Expecter) ListRecordingSessions(ctxt interface{}) *PersistenceManager_ListRecordingSessions_Call {
	return &PersistenceManager_ListRecordingSessions_Call{Call: _e.mock.On("ListRecordingSessions", ctxt)}
}

func (_c *PersistenceManager_ListRecordingSessions_Call) Run(run func(ctxt context.Context)) *PersistenceManager_ListRecordingSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PersistenceManager_ListRecordingSessions_Call) Return(recordings []common.Recording, err error) *PersistenceManager_ListRecordingSessions_Call {
	_c.Call.Return(recordings, err)
	return _c
}

func (_c *PersistenceManager_ListRecordingSessions_Call) RunAndReturn(run func(ctxt context.Context) ([]common.Recording, error)) *PersistenceManager_ListRecordingSessions_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecordingSessionsOfSource provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) ListRecordingSessionsOfSource(ctxt context.Context, sourceID string, active bool) ([]common.Recording, error) {
	ret := _mock.Called(ctxt, sourceID, active)

	if len(ret) == 0 {
		panic("no return value specified for ListRecordingSessionsOfSource")
	}

	var r0 []common.Recording
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) ([]common.Recording, error)); ok {
		return returnFunc(ctxt, sourceID, active)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) []common.Recording); ok {
		r0 = returnFunc(ctxt, sourceID, active)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Recording)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctxt, sourceID, active)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_ListRecordingSessionsOfSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecordingSessionsOfSource'
type PersistenceManager_ListRecordingSessionsOfSource_Call struct {
	*mock.Call
}

// ListRecordingSessionsOfSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - active bool
func (_e *PersistenceManager_Expecter) ListRecordingSessionsOfSource(ctxt interface{}, sourceID interface{}, active interface{}) *PersistenceManager_ListRecordingSessionsOfSource_Call {
	return &PersistenceManager_ListRecordingSessionsOfSource_Call{Call: _e.mock.On("ListRecordingSessionsOfSource", ctxt, sourceID, active)}
}

func (_c *PersistenceManager_ListRecordingSessionsOfSource_Call) Run(run func(ctxt context.Context, sourceID string, active bool)) *PersistenceManager_ListRecordingSessionsOfSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PersistenceManager_ListRecordingSessionsOfSource_Call) Return(recordings []common.Recording, err error) *PersistenceManager_ListRecordingSessionsOfSource_Call {
	_c.Call.Return(recordings, err)
	return _c
}

func (_c *PersistenceManager_ListRecordingSessionsOfSource_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, active bool) ([]common.Recording, error)) *PersistenceManager_ListRecordingSessionsOfSource_Call {
	_c.Call.Return(run)
	return _c
}

// ListVideoSources provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) ListVideoSources(ctxt context.Context) ([]common.VideoSource, error) {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for ListVideoSources")
	}

	var r0 []common.VideoSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]common.VideoSource, error)); ok {
		return returnFunc(ctxt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []common.VideoSource); ok {
		r0 = returnFunc(ctxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctxt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_ListVideoSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVideoSources'
type PersistenceManager_ListVideoSources_Call struct {
	*mock.Call
}

// ListVideoSources is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *PersistenceManager_Expecter) ListVideoSources(ctxt interface{}) *PersistenceManager_ListVideoSources_Call {
	return &PersistenceManager_ListVideoSources_Call{Call: _e.mock.On("ListVideoSources", ctxt)}
}

func (_c *PersistenceManager_ListVideoSources_Call) Run(run func(ctxt context.Context)) *PersistenceManager_ListVideoSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PersistenceManager_ListVideoSources_Call) Return(videoSources []common.VideoSource, err error) *PersistenceManager_ListVideoSources_Call {
	_c.Call.Return(videoSources, err)
	return _c
}

func (_c *PersistenceManager_ListVideoSources_Call) RunAndReturn(run func(ctxt context.Context) ([]common.VideoSource, error)) *PersistenceManager_ListVideoSources_Call {
	_c.Call.Return(run)
	return _c
}

// MarkEndOfRecordingSession provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) MarkEndOfRecordingSession(ctxt context.Context, id string, endTime time.Time) error {
	ret := _mock.Called(ctxt, id, endTime)

	if len(ret) == 0 {
		panic("no return value specified for MarkEndOfRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = returnFunc(ctxt, id, endTime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_MarkEndOfRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkEndOfRecordingSession'
type PersistenceManager_MarkEndOfRecordingSession_Call struct {
	*mock.Call
}

// MarkEndOfRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - endTime time.Time
func (_e *PersistenceManager_Expecter) MarkEndOfRecordingSession(ctxt interface{}, id interface{}, endTime interface{}) *PersistenceManager_MarkEndOfRecordingSession_Call {
	return &PersistenceManager_MarkEndOfRecordingSession_Call{Call: _e.mock.On("MarkEndOfRecordingSession", ctxt, id, endTime)}
}

func (_c *PersistenceManager_MarkEndOfRecordingSession_Call) Run(run func(ctxt context.Context, id string, endTime time.Time)) *PersistenceManager_MarkEndOfRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PersistenceManager_MarkEndOfRecordingSession_Call) Return(err error) *PersistenceManager_MarkEndOfRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_MarkEndOfRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, id string, endTime time.Time) error) *PersistenceManager_MarkEndOfRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// MarkExternalError provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) MarkExternalError(err error) {
	_mock.Called(err)
	return
}

// PersistenceManager_MarkExternalError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkExternalError'
type PersistenceManager_MarkExternalError_Call struct {
	*mock.Call
}

// MarkExternalError is a helper method to define mock.On call
//   - err error
func (_e *PersistenceManager_Expecter) MarkExternalError(err interface{}) *PersistenceManager_MarkExternalError_Call {
	return &PersistenceManager_MarkExternalError_Call{Call: _e.mock.On("MarkExternalError", err)}
}

func (_c *PersistenceManager_MarkExternalError_Call) Run(run func(err error)) *PersistenceManager_MarkExternalError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 error
		if args[0] != nil {
			arg0 = args[0].(error)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PersistenceManager_MarkExternalError_Call) Return() *PersistenceManager_MarkExternalError_Call {
	_c.Call.Return()
	return _c
}

func (_c *PersistenceManager_MarkExternalError_Call) RunAndReturn(run func(err error)) *PersistenceManager_MarkExternalError_Call {
	_c.Run(run)
	return _c
}

// MarkLiveStreamSegmentsUploaded provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) MarkLiveStreamSegmentsUploaded(ctxt context.Context, ids []string) error {
	ret := _mock.Called(ctxt, ids)

	if len(ret) == 0 {
		panic("no return value specified for MarkLiveStreamSegmentsUploaded")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = returnFunc(ctxt, ids)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_MarkLiveStreamSegmentsUploaded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkLiveStreamSegmentsUploaded'
type PersistenceManager_MarkLiveStreamSegmentsUploaded_Call struct {
	*mock.Call
}

// MarkLiveStreamSegmentsUploaded is a helper method to define mock.On call
//   - ctxt context.Context
//   - ids []string
func (_e *PersistenceManager_Expecter) MarkLiveStreamSegmentsUploaded(ctxt interface{}, ids interface{}) *PersistenceManager_MarkLiveStreamSegmentsUploaded_Call {
	return &PersistenceManager_MarkLiveStreamSegmentsUploaded_Call{Call: _e.mock.On("MarkLiveStreamSegmentsUploaded", ctxt, ids)}
}

func (_c *PersistenceManager_MarkLiveStreamSegmentsUploaded_Call) Run(run func(ctxt context.Context, ids []string)) *PersistenceManager_MarkLiveStreamSegmentsUploaded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_MarkLiveStreamSegmentsUploaded_Call) Return(err error) *PersistenceManager_MarkLiveStreamSegmentsUploaded_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_MarkLiveStreamSegmentsUploaded_Call) RunAndReturn(run func(ctxt context.Context, ids []string) error) *PersistenceManager_MarkLiveStreamSegmentsUploaded_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) Ready(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type PersistenceManager_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *PersistenceManager_Expecter) Ready(ctxt interface{}) *PersistenceManager_Ready_Call {
	return &PersistenceManager_Ready_Call{Call: _e.mock.On("Ready", ctxt)}
}

func (_c *PersistenceManager_Ready_Call) Run(run func(ctxt context.Context)) *PersistenceManager_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *PersistenceManager_Ready_Call) Return(err error) *PersistenceManager_Ready_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_Ready_Call) RunAndReturn(run func(ctxt context.Context) error) *PersistenceManager_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// RecordKnownRecordingSession provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) RecordKnownRecordingSession(ctxt context.Context, entry common.Recording) error {
	ret := _mock.Called(ctxt, entry)

	if len(ret) == 0 {
		panic("no return value specified for RecordKnownRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Recording) error); ok {
		r0 = returnFunc(ctxt, entry)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_RecordKnownRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordKnownRecordingSession'
type PersistenceManager_RecordKnownRecordingSession_Call struct {
	*mock.Call
}

// RecordKnownRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - entry common.Recording
func (_e *PersistenceManager_Expecter) RecordKnownRecordingSession(ctxt interface{}, entry interface{}) *PersistenceManager_RecordKnownRecordingSession_Call {
	return &PersistenceManager_RecordKnownRecordingSession_Call{Call: _e.mock.On("RecordKnownRecordingSession", ctxt, entry)}
}

func (_c *PersistenceManager_RecordKnownRecordingSession_Call) Run(run func(ctxt context.Context, entry common.Recording)) *PersistenceManager_RecordKnownRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Recording
		if args[1] != nil {
			arg1 = args[1].(common.Recording)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_RecordKnownRecordingSession_Call) Return(err error) *PersistenceManager_RecordKnownRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_RecordKnownRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, entry common.Recording) error) *PersistenceManager_RecordKnownRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// RecordKnownVideoSource provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) RecordKnownVideoSource(ctxt context.Context, id string, name string, segmentLen int, playlistURI *string, description *string, streaming int) error {
	ret := _mock.Called(ctxt, id, name, segmentLen, playlistURI, description, streaming)

	if len(ret) == 0 {
		panic("no return value specified for RecordKnownVideoSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, int, *string, *string, int) error); ok {
		r0 = returnFunc(ctxt, id, name, segmentLen, playlistURI, description, streaming)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_RecordKnownVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordKnownVideoSource'
type PersistenceManager_RecordKnownVideoSource_Call struct {
	*mock.Call
}

// RecordKnownVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - name string
//   - segmentLen int
//   - playlistURI *string
//   - description *string
//   - streaming int
func (_e *PersistenceManager_Expecter) RecordKnownVideoSource(ctxt interface{}, id interface{}, name interface{}, segmentLen interface{}, playlistURI interface{}, description interface{}, streaming interface{}) *PersistenceManager_RecordKnownVideoSource_Call {
	return &PersistenceManager_RecordKnownVideoSource_Call{Call: _e.mock.On("RecordKnownVideoSource", ctxt, id, name, segmentLen, playlistURI, description, streaming)}
}

func (_c *PersistenceManager_RecordKnownVideoSource_Call) Run(run func(ctxt context.Context, id string, name string, segmentLen int, playlistURI *string, description *string, streaming int)) *PersistenceManager_RecordKnownVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		var arg5 *string
		if args[5] != nil {
			arg5 = args[5].(*string)
		}
		var arg6 int
		if args[6] != nil {
			arg6 = args[6].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *PersistenceManager_RecordKnownVideoSource_Call) Return(err error) *PersistenceManager_RecordKnownVideoSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_RecordKnownVideoSource_Call) RunAndReturn(run func(ctxt context.Context, id string, name string, segmentLen int, playlistURI *string, description *string, streaming int) error) *PersistenceManager_RecordKnownVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterLiveStreamSegment provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) RegisterLiveStreamSegment(ctxt context.Context, sourceID string, segment hls.Segment) (string, error) {
	ret := _mock.Called(ctxt, sourceID, segment)

	if len(ret) == 0 {
		panic("no return value specified for RegisterLiveStreamSegment")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, hls.Segment) (string, error)); ok {
		return returnFunc(ctxt, sourceID, segment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, hls.Segment) string); ok {
		r0 = returnFunc(ctxt, sourceID, segment)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, hls.Segment) error); ok {
		r1 = returnFunc(ctxt, sourceID, segment)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// PersistenceManager_RegisterLiveStreamSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterLiveStreamSegment'
type PersistenceManager_RegisterLiveStreamSegment_Call struct {
	*mock.Call
}

// RegisterLiveStreamSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - segment hls.Segment
func (_e *PersistenceManager_Expecter) RegisterLiveStreamSegment(ctxt interface{}, sourceID interface{}, segment interface{}) *PersistenceManager_RegisterLiveStreamSegment_Call {
	return &PersistenceManager_RegisterLiveStreamSegment_Call{Call: _e.mock.On("RegisterLiveStreamSegment", ctxt, sourceID, segment)}
}

func (_c *PersistenceManager_RegisterLiveStreamSegment_Call) Run(run func(ctxt context.Context, sourceID string, segment hls.Segment)) *PersistenceManager_RegisterLiveStreamSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 hls.Segment
		if args[2] != nil {
			arg2 = args[2].(hls.Segment)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PersistenceManager_RegisterLiveStreamSegment_Call) Return(s string, err error) *PersistenceManager_RegisterLiveStreamSegment_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *PersistenceManager_RegisterLiveStreamSegment_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, segment hls.Segment) (string, error)) *PersistenceManager_RegisterLiveStreamSegment_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterRecordingSegments provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) RegisterRecordingSegments(ctxt context.Context, recordingIDs []string, segments []common.VideoSegment) error {
	ret := _mock.Called(ctxt, recordingIDs, segments)

	if len(ret) == 0 {
		panic("no return value specified for RegisterRecordingSegments")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []string, []common.VideoSegment) error); ok {
		r0 = returnFunc(ctxt, recordingIDs, segments)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_RegisterRecordingSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterRecordingSegments'
type PersistenceManager_RegisterRecordingSegments_Call struct {
	*mock.Call
}

// RegisterRecordingSegments is a helper method to define mock.On call
//   - ctxt context.Context
//   - recordingIDs []string
//   - segments []common.VideoSegment
func (_e *PersistenceManager_Expecter) RegisterRecordingSegments(ctxt interface{}, recordingIDs interface{}, segments interface{}) *PersistenceManager_RegisterRecordingSegments_Call {
	return &PersistenceManager_RegisterRecordingSegments_Call{Call: _e.mock.On("RegisterRecordingSegments", ctxt, recordingIDs, segments)}
}

func (_c *PersistenceManager_RegisterRecordingSegments_Call) Run(run func(ctxt context.Context, recordingIDs []string, segments []common.VideoSegment)) *PersistenceManager_RegisterRecordingSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []string
		if args[1] != nil {
			arg1 = args[1].([]string)
		}
		var arg2 []common.VideoSegment
		if args[2] != nil {
			arg2 = args[2].([]common.VideoSegment)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *PersistenceManager_RegisterRecordingSegments_Call) Return(err error) *PersistenceManager_RegisterRecordingSegments_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_RegisterRecordingSegments_Call) RunAndReturn(run func(ctxt context.Context, recordingIDs []string, segments []common.VideoSegment) error) *PersistenceManager_RegisterRecordingSegments_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRecordingSession provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) UpdateRecordingSession(ctxt context.Context, newSetting common.Recording) error {
	ret := _mock.Called(ctxt, newSetting)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Recording) error); ok {
		r0 = returnFunc(ctxt, newSetting)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_UpdateRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRecordingSession'
type PersistenceManager_UpdateRecordingSession_Call struct {
	*mock.Call
}

// UpdateRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - newSetting common.Recording
func (_e *PersistenceManager_Expecter) UpdateRecordingSession(ctxt interface{}, newSetting interface{}) *PersistenceManager_UpdateRecordingSession_Call {
	return &PersistenceManager_UpdateRecordingSession_Call{Call: _e.mock.On("UpdateRecordingSession", ctxt, newSetting)}
}

func (_c *PersistenceManager_UpdateRecordingSession_Call) Run(run func(ctxt context.Context, newSetting common.Recording)) *PersistenceManager_UpdateRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Recording
		if args[1] != nil {
			arg1 = args[1].(common.Recording)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_UpdateRecordingSession_Call) Return(err error) *PersistenceManager_UpdateRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_UpdateRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, newSetting common.Recording) error) *PersistenceManager_UpdateRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVideoSource provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) UpdateVideoSource(ctxt context.Context, newSetting common.VideoSource) error {
	ret := _mock.Called(ctxt, newSetting)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVideoSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource) error); ok {
		r0 = returnFunc(ctxt, newSetting)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_UpdateVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVideoSource'
type PersistenceManager_UpdateVideoSource_Call struct {
	*mock.Call
}

// UpdateVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - newSetting common.VideoSource
func (_e *PersistenceManager_Expecter) UpdateVideoSource(ctxt interface{}, newSetting interface{}) *PersistenceManager_UpdateVideoSource_Call {
	return &PersistenceManager_UpdateVideoSource_Call{Call: _e.mock.On("UpdateVideoSource", ctxt, newSetting)}
}

func (_c *PersistenceManager_UpdateVideoSource_Call) Run(run func(ctxt context.Context, newSetting common.VideoSource)) *PersistenceManager_UpdateVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSource
		if args[1] != nil {
			arg1 = args[1].(common.VideoSource)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *PersistenceManager_UpdateVideoSource_Call) Return(err error) *PersistenceManager_UpdateVideoSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_UpdateVideoSource_Call) RunAndReturn(run func(ctxt context.Context, newSetting common.VideoSource) error) *PersistenceManager_UpdateVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVideoSourceStats provides a mock function for the type PersistenceManager
func (_mock *PersistenceManager) UpdateVideoSourceStats(ctxt context.Context, id string, reqRespTargetID string, sourceLocalTime time.Time) error {
	ret := _mock.Called(ctxt, id, reqRespTargetID, sourceLocalTime)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVideoSourceStats")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Time) error); ok {
		r0 = returnFunc(ctxt, id, reqRespTargetID, sourceLocalTime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// PersistenceManager_UpdateVideoSourceStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVideoSourceStats'
type PersistenceManager_UpdateVideoSourceStats_Call struct {
	*mock.Call
}

// UpdateVideoSourceStats is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - reqRespTargetID string
//   - sourceLocalTime time.Time
func (_e *PersistenceManager_Expecter) UpdateVideoSourceStats(ctxt interface{}, id interface{}, reqRespTargetID interface{}, sourceLocalTime interface{}) *PersistenceManager_UpdateVideoSourceStats_Call {
	return &PersistenceManager_UpdateVideoSourceStats_Call{Call: _e.mock.On("UpdateVideoSourceStats", ctxt, id, reqRespTargetID, sourceLocalTime)}
}

func (_c *PersistenceManager_UpdateVideoSourceStats_Call) Run(run func(ctxt context.Context, id string, reqRespTargetID string, sourceLocalTime time.Time)) *PersistenceManager_UpdateVideoSourceStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *PersistenceManager_UpdateVideoSourceStats_Call) Return(err error) *PersistenceManager_UpdateVideoSourceStats_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *PersistenceManager_UpdateVideoSourceStats_Call) RunAndReturn(run func(ctxt context.Context, id string, reqRespTargetID string, sourceLocalTime time.Time) error) *PersistenceManager_UpdateVideoSourceStats_Call {
	_c.Call.Return(run)
	return _c
}
