// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/alwitt/livemix/common"
	"github.com/alwitt/livemix/control"
	"github.com/alwitt/livemix/hls"
	mock "github.com/stretchr/testify/mock"
)

// NewEdgeRequestClient creates a new instance of EdgeRequestClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEdgeRequestClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *EdgeRequestClient {
	mock := &EdgeRequestClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// EdgeRequestClient is an autogenerated mock type for the EdgeRequestClient type
type EdgeRequestClient struct {
	mock.Mock
}

type EdgeRequestClient_Expecter struct {
	mock *mock.Mock
}

func (_m *EdgeRequestClient) EXPECT() *EdgeRequestClient_Expecter {
	return &EdgeRequestClient_Expecter{mock: &_m.Mock}
}

// ChangeVideoStreamingState provides a mock function for the type EdgeRequestClient
func (_mock *EdgeRequestClient) ChangeVideoStreamingState(ctxt context.Context, source common.VideoSource, newState int) error {
	ret := _mock.Called(ctxt, source, newState)

	if len(ret) == 0 {
		panic("no return value specified for ChangeVideoStreamingState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource, int) error); ok {
		r0 = returnFunc(ctxt, source, newState)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EdgeRequestClient_ChangeVideoStreamingState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeVideoStreamingState'
type EdgeRequestClient_ChangeVideoStreamingState_Call struct {
	*mock.Call
}

// ChangeVideoStreamingState is a helper method to define mock.On call
//   - ctxt context.Context
//   - source common.VideoSource
//   - newState int
func (_e *EdgeRequestClient_Expecter) ChangeVideoStreamingState(ctxt interface{}, source interface{}, newState interface{}) *EdgeRequestClient_ChangeVideoStreamingState_Call {
	return &EdgeRequestClient_ChangeVideoStreamingState_Call{Call: _e.mock.On("ChangeVideoStreamingState", ctxt, source, newState)}
}

func (_c *EdgeRequestClient_ChangeVideoStreamingState_Call) Run(run func(ctxt context.Context, source common.VideoSource, newState int)) *EdgeRequestClient_ChangeVideoStreamingState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSource
		if args[1] != nil {
			arg1 = args[1].(common.VideoSource)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *EdgeRequestClient_ChangeVideoStreamingState_Call) Return(err error) *EdgeRequestClient_ChangeVideoStreamingState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EdgeRequestClient_ChangeVideoStreamingState_Call) RunAndReturn(run func(ctxt context.Context, source common.VideoSource, newState int) error) *EdgeRequestClient_ChangeVideoStreamingState_Call {
	_c.Call.Return(run)
	return _c
}

// InstallReferenceToManager provides a mock function for the type EdgeRequestClient
func (_mock *EdgeRequestClient) InstallReferenceToManager(newManager control.SystemManager) {
	_mock.Called(newManager)
	return
}

// EdgeRequestClient_InstallReferenceToManager_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InstallReferenceToManager'
type EdgeRequestClient_InstallReferenceToManager_Call struct {
	*mock.Call
}

// InstallReferenceToManager is a helper method to define mock.On call
//   - newManager control.SystemManager
func (_e *EdgeRequestClient_Expecter) InstallReferenceToManager(newManager interface{}) *EdgeRequestClient_InstallReferenceToManager_Call {
	return &EdgeRequestClient_InstallReferenceToManager_Call{Call: _e.mock.On("InstallReferenceToManager", newManager)}
}

func (_c *EdgeRequestClient_InstallReferenceToManager_Call) Run(run func(newManager control.SystemManager)) *EdgeRequestClient_InstallReferenceToManager_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 control.SystemManager
		if args[0] != nil {
			arg0 = args[0].(control.SystemManager)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *EdgeRequestClient_InstallReferenceToManager_Call) Return() *EdgeRequestClient_InstallReferenceToManager_Call {
	_c.Call.Return()
	return _c
}

func (_c *EdgeRequestClient_InstallReferenceToManager_Call) RunAndReturn(run func(newManager control.SystemManager)) *EdgeRequestClient_InstallReferenceToManager_Call {
	_c.Run(run)
	return _c
}

// StartRecordingSession provides a mock function for the type EdgeRequestClient
func (_mock *EdgeRequestClient) StartRecordingSession(ctxt context.Context, source common.VideoSource, recording common.Recording) error {
	ret := _mock.Called(ctxt, source, recording)

	if len(ret) == 0 {
		panic("no return value specified for StartRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource, common.Recording) error); ok {
		r0 = returnFunc(ctxt, source, recording)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EdgeRequestClient_StartRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartRecordingSession'
type EdgeRequestClient_StartRecordingSession_Call struct {
	*mock.Call
}

// StartRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - source common.VideoSource
//   - recording common.Recording
func (_e *EdgeRequestClient_Expecter) StartRecordingSession(ctxt interface{}, source interface{}, recording interface{}) *EdgeRequestClient_StartRecordingSession_Call {
	return &EdgeRequestClient_StartRecordingSession_Call{Call: _e.mock.On("StartRecordingSession", ctxt, source, recording)}
}

func (_c *EdgeRequestClient_StartRecordingSession_Call) Run(run func(ctxt context.Context, source common.VideoSource, recording common.Recording)) *EdgeRequestClient_StartRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSource
		if args[1] != nil {
			arg1 = args[1].(common.VideoSource)
		}
		var arg2 common.Recording
		if args[2] != nil {
			arg2 = args[2].(common.Recording)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *EdgeRequestClient_StartRecordingSession_Call) Return(err error) *EdgeRequestClient_StartRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EdgeRequestClient_StartRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, source common.VideoSource, recording common.Recording) error) *EdgeRequestClient_StartRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// StopRecordingSession provides a mock function for the type EdgeRequestClient
func (_mock *EdgeRequestClient) StopRecordingSession(ctxt context.Context, source common.VideoSource, recordingID string, endTime time.Time) error {
	ret := _mock.Called(ctxt, source, recordingID, endTime)

	if len(ret) == 0 {
		panic("no return value specified for StopRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource, string, time.Time) error); ok {
		r0 = returnFunc(ctxt, source, recordingID, endTime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// EdgeRequestClient_StopRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopRecordingSession'
type EdgeRequestClient_StopRecordingSession_Call struct {
	*mock.Call
}

// StopRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - source common.VideoSource
//   - recordingID string
//   - endTime time.Time
func (_e *EdgeRequestClient_Expecter) StopRecordingSession(ctxt interface{}, source interface{}, recordingID interface{}, endTime interface{}) *EdgeRequestClient_StopRecordingSession_Call {
	return &EdgeRequestClient_StopRecordingSession_Call{Call: _e.mock.On("StopRecordingSession", ctxt, source, recordingID, endTime)}
}

func (_c *EdgeRequestClient_StopRecordingSession_Call) Run(run func(ctxt context.Context, source common.VideoSource, recordingID string, endTime time.Time)) *EdgeRequestClient_StopRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSource
		if args[1] != nil {
			arg1 = args[1].(common.VideoSource)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *EdgeRequestClient_StopRecordingSession_Call) Return(err error) *EdgeRequestClient_StopRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *EdgeRequestClient_StopRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, source common.VideoSource, recordingID string, endTime time.Time) error) *EdgeRequestClient_StopRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewSystemManager creates a new instance of SystemManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSystemManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *SystemManager {
	mock := &SystemManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SystemManager is an autogenerated mock type for the SystemManager type
type SystemManager struct {
	mock.Mock
}

type SystemManager_Expecter struct {
	mock *mock.Mock
}

func (_m *SystemManager) EXPECT() *SystemManager_Expecter {
	return &SystemManager_Expecter{mock: &_m.Mock}
}

// ChangeVideoSourceStreamState provides a mock function for the type SystemManager
func (_mock *SystemManager) ChangeVideoSourceStreamState(ctxt context.Context, id string, streaming int) error {
	ret := _mock.Called(ctxt, id, streaming)

	if len(ret) == 0 {
		panic("no return value specified for ChangeVideoSourceStreamState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int) error); ok {
		r0 = returnFunc(ctxt, id, streaming)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_ChangeVideoSourceStreamState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeVideoSourceStreamState'
type SystemManager_ChangeVideoSourceStreamState_Call struct {
	*mock.Call
}

// ChangeVideoSourceStreamState is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - streaming int
func (_e *SystemManager_Expecter) ChangeVideoSourceStreamState(ctxt interface{}, id interface{}, streaming interface{}) *SystemManager_ChangeVideoSourceStreamState_Call {
	return &SystemManager_ChangeVideoSourceStreamState_Call{Call: _e.mock.On("ChangeVideoSourceStreamState", ctxt, id, streaming)}
}

func (_c *SystemManager_ChangeVideoSourceStreamState_Call) Run(run func(ctxt context.Context, id string, streaming int)) *SystemManager_ChangeVideoSourceStreamState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *SystemManager_ChangeVideoSourceStreamState_Call) Return(err error) *SystemManager_ChangeVideoSourceStreamState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_ChangeVideoSourceStreamState_Call) RunAndReturn(run func(ctxt context.Context, id string, streaming int) error) *SystemManager_ChangeVideoSourceStreamState_Call {
	_c.Call.Return(run)
	return _c
}

// DefineRecordingSession provides a mock function for the type SystemManager
func (_mock *SystemManager) DefineRecordingSession(ctxt context.Context, sourceID string, alias *string, description *string, startTime time.Time) (string, error) {
	ret := _mock.Called(ctxt, sourceID, alias, description, startTime)

	if len(ret) == 0 {
		panic("no return value specified for DefineRecordingSession")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, *string, time.Time) (string, error)); ok {
		return returnFunc(ctxt, sourceID, alias, description, startTime)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string, *string, time.Time) string); ok {
		r0 = returnFunc(ctxt, sourceID, alias, description, startTime)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string, *string, time.Time) error); ok {
		r1 = returnFunc(ctxt, sourceID, alias, description, startTime)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_DefineRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefineRecordingSession'
type SystemManager_DefineRecordingSession_Call struct {
	*mock.Call
}

// DefineRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - alias *string
//   - description *string
//   - startTime time.Time
func (_e *SystemManager_Expecter) DefineRecordingSession(ctxt interface{}, sourceID interface{}, alias interface{}, description interface{}, startTime interface{}) *SystemManager_DefineRecordingSession_Call {
	return &SystemManager_DefineRecordingSession_Call{Call: _e.mock.On("DefineRecordingSession", ctxt, sourceID, alias, description, startTime)}
}

func (_c *SystemManager_DefineRecordingSession_Call) Run(run func(ctxt context.Context, sourceID string, alias *string, description *string, startTime time.Time)) *SystemManager_DefineRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 time.Time
		if args[4] != nil {
			arg4 = args[4].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *SystemManager_DefineRecordingSession_Call) Return(s string, err error) *SystemManager_DefineRecordingSession_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *SystemManager_DefineRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, alias *string, description *string, startTime time.Time) (string, error)) *SystemManager_DefineRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// DefineVideoSource provides a mock function for the type SystemManager
func (_mock *SystemManager) DefineVideoSource(ctxt context.Context, name string, segmentLen int, playlistURI *string, description *string) (string, error) {
	ret := _mock.Called(ctxt, name, segmentLen, playlistURI, description)

	if len(ret) == 0 {
		panic("no return value specified for DefineVideoSource")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, *string, *string) (string, error)); ok {
		return returnFunc(ctxt, name, segmentLen, playlistURI, description)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, *string, *string) string); ok {
		r0 = returnFunc(ctxt, name, segmentLen, playlistURI, description)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, *string, *string) error); ok {
		r1 = returnFunc(ctxt, name, segmentLen, playlistURI, description)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_DefineVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DefineVideoSource'
type SystemManager_DefineVideoSource_Call struct {
	*mock.Call
}

// DefineVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - name string
//   - segmentLen int
//   - playlistURI *string
//   - description *string
func (_e *SystemManager_Expecter) DefineVideoSource(ctxt interface{}, name interface{}, segmentLen interface{}, playlistURI interface{}, description interface{}) *SystemManager_DefineVideoSource_Call {
	return &SystemManager_DefineVideoSource_Call{Call: _e.mock.On("DefineVideoSource", ctxt, name, segmentLen, playlistURI, description)}
}

func (_c *SystemManager_DefineVideoSource_Call) Run(run func(ctxt context.Context, name string, segmentLen int, playlistURI *string, description *string)) *SystemManager_DefineVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 *string
		if args[3] != nil {
			arg3 = args[3].(*string)
		}
		var arg4 *string
		if args[4] != nil {
			arg4 = args[4].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *SystemManager_DefineVideoSource_Call) Return(s string, err error) *SystemManager_DefineVideoSource_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *SystemManager_DefineVideoSource_Call) RunAndReturn(run func(ctxt context.Context, name string, segmentLen int, playlistURI *string, description *string) (string, error)) *SystemManager_DefineVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRecordingSession provides a mock function for the type SystemManager
func (_mock *SystemManager) DeleteRecordingSession(ctxt context.Context, id string, force bool) error {
	ret := _mock.Called(ctxt, id, force)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = returnFunc(ctxt, id, force)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_DeleteRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRecordingSession'
type SystemManager_DeleteRecordingSession_Call struct {
	*mock.Call
}

// DeleteRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - force bool
func (_e *SystemManager_Expecter) DeleteRecordingSession(ctxt interface{}, id interface{}, force interface{}) *SystemManager_DeleteRecordingSession_Call {
	return &SystemManager_DeleteRecordingSession_Call{Call: _e.mock.On("DeleteRecordingSession", ctxt, id, force)}
}

func (_c *SystemManager_DeleteRecordingSession_Call) Run(run func(ctxt context.Context, id string, force bool)) *SystemManager_DeleteRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *SystemManager_DeleteRecordingSession_Call) Return(err error) *SystemManager_DeleteRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_DeleteRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, id string, force bool) error) *SystemManager_DeleteRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUnassociatedRecordingSegments provides a mock function for the type SystemManager
func (_mock *SystemManager) DeleteUnassociatedRecordingSegments() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteUnassociatedRecordingSegments")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_DeleteUnassociatedRecordingSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUnassociatedRecordingSegments'
type SystemManager_DeleteUnassociatedRecordingSegments_Call struct {
	*mock.Call
}

// DeleteUnassociatedRecordingSegments is a helper method to define mock.On call
func (_e *SystemManager_Expecter) DeleteUnassociatedRecordingSegments() *SystemManager_DeleteUnassociatedRecordingSegments_Call {
	return &SystemManager_DeleteUnassociatedRecordingSegments_Call{Call: _e.mock.On("DeleteUnassociatedRecordingSegments")}
}

func (_c *SystemManager_DeleteUnassociatedRecordingSegments_Call) Run(run func()) *SystemManager_DeleteUnassociatedRecordingSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SystemManager_DeleteUnassociatedRecordingSegments_Call) Return(err error) *SystemManager_DeleteUnassociatedRecordingSegments_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_DeleteUnassociatedRecordingSegments_Call) RunAndReturn(run func() error) *SystemManager_DeleteUnassociatedRecordingSegments_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVideoSource provides a mock function for the type SystemManager
func (_mock *SystemManager) DeleteVideoSource(ctxt context.Context, id string) error {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVideoSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_DeleteVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVideoSource'
type SystemManager_DeleteVideoSource_Call struct {
	*mock.Call
}

// DeleteVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *SystemManager_Expecter) DeleteVideoSource(ctxt interface{}, id interface{}) *SystemManager_DeleteVideoSource_Call {
	return &SystemManager_DeleteVideoSource_Call{Call: _e.mock.On("DeleteVideoSource", ctxt, id)}
}

func (_c *SystemManager_DeleteVideoSource_Call) Run(run func(ctxt context.Context, id string)) *SystemManager_DeleteVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemManager_DeleteVideoSource_Call) Return(err error) *SystemManager_DeleteVideoSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_DeleteVideoSource_Call) RunAndReturn(run func(ctxt context.Context, id string) error) *SystemManager_DeleteVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingSession provides a mock function for the type SystemManager
func (_mock *SystemManager) GetRecordingSession(ctxt context.Context, id string) (common.Recording, error) {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordingSession")
	}

	var r0 common.Recording
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.Recording, error)); ok {
		return returnFunc(ctxt, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.Recording); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Get(0).(common.Recording)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_GetRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingSession'
type SystemManager_GetRecordingSession_Call struct {
	*mock.Call
}

// GetRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *SystemManager_Expecter) GetRecordingSession(ctxt interface{}, id interface{}) *SystemManager_GetRecordingSession_Call {
	return &SystemManager_GetRecordingSession_Call{Call: _e.mock.On("GetRecordingSession", ctxt, id)}
}

func (_c *SystemManager_GetRecordingSession_Call) Run(run func(ctxt context.Context, id string)) *SystemManager_GetRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemManager_GetRecordingSession_Call) Return(recording common.Recording, err error) *SystemManager_GetRecordingSession_Call {
	_c.Call.Return(recording, err)
	return _c
}

func (_c *SystemManager_GetRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, id string) (common.Recording, error)) *SystemManager_GetRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecordingSessionByAlias provides a mock function for the type SystemManager
func (_mock *SystemManager) GetRecordingSessionByAlias(ctxt context.Context, alias string) (common.Recording, error) {
	ret := _mock.Called(ctxt, alias)

	if len(ret) == 0 {
		panic("no return value specified for GetRecordingSessionByAlias")
	}

	var r0 common.Recording
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.Recording, error)); ok {
		return returnFunc(ctxt, alias)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.Recording); ok {
		r0 = returnFunc(ctxt, alias)
	} else {
		r0 = ret.Get(0).(common.Recording)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, alias)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_GetRecordingSessionByAlias_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecordingSessionByAlias'
type SystemManager_GetRecordingSessionByAlias_Call struct {
	*mock.Call
}

// GetRecordingSessionByAlias is a helper method to define mock.On call
//   - ctxt context.Context
//   - alias string
func (_e *SystemManager_Expecter) GetRecordingSessionByAlias(ctxt interface{}, alias interface{}) *SystemManager_GetRecordingSessionByAlias_Call {
	return &SystemManager_GetRecordingSessionByAlias_Call{Call: _e.mock.On("GetRecordingSessionByAlias", ctxt, alias)}
}

func (_c *SystemManager_GetRecordingSessionByAlias_Call) Run(run func(ctxt context.Context, alias string)) *SystemManager_GetRecordingSessionByAlias_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemManager_GetRecordingSessionByAlias_Call) Return(recording common.Recording, err error) *SystemManager_GetRecordingSessionByAlias_Call {
	_c.Call.Return(recording, err)
	return _c
}

func (_c *SystemManager_GetRecordingSessionByAlias_Call) RunAndReturn(run func(ctxt context.Context, alias string) (common.Recording, error)) *SystemManager_GetRecordingSessionByAlias_Call {
	_c.Call.Return(run)
	return _c
}

// GetVideoSource provides a mock function for the type SystemManager
func (_mock *SystemManager) GetVideoSource(ctxt context.Context, id string) (common.VideoSource, error) {
	ret := _mock.Called(ctxt, id)

	if len(ret) == 0 {
		panic("no return value specified for GetVideoSource")
	}

	var r0 common.VideoSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.VideoSource, error)); ok {
		return returnFunc(ctxt, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.VideoSource); ok {
		r0 = returnFunc(ctxt, id)
	} else {
		r0 = ret.Get(0).(common.VideoSource)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_GetVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVideoSource'
type SystemManager_GetVideoSource_Call struct {
	*mock.Call
}

// GetVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
func (_e *SystemManager_Expecter) GetVideoSource(ctxt interface{}, id interface{}) *SystemManager_GetVideoSource_Call {
	return &SystemManager_GetVideoSource_Call{Call: _e.mock.On("GetVideoSource", ctxt, id)}
}

func (_c *SystemManager_GetVideoSource_Call) Run(run func(ctxt context.Context, id string)) *SystemManager_GetVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemManager_GetVideoSource_Call) Return(videoSource common.VideoSource, err error) *SystemManager_GetVideoSource_Call {
	_c.Call.Return(videoSource, err)
	return _c
}

func (_c *SystemManager_GetVideoSource_Call) RunAndReturn(run func(ctxt context.Context, id string) (common.VideoSource, error)) *SystemManager_GetVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// GetVideoSourceByName provides a mock function for the type SystemManager
func (_mock *SystemManager) GetVideoSourceByName(ctxt context.Context, name string) (common.VideoSource, error) {
	ret := _mock.Called(ctxt, name)

	if len(ret) == 0 {
		panic("no return value specified for GetVideoSourceByName")
	}

	var r0 common.VideoSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (common.VideoSource, error)); ok {
		return returnFunc(ctxt, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) common.VideoSource); ok {
		r0 = returnFunc(ctxt, name)
	} else {
		r0 = ret.Get(0).(common.VideoSource)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_GetVideoSourceByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVideoSourceByName'
type SystemManager_GetVideoSourceByName_Call struct {
	*mock.Call
}

// GetVideoSourceByName is a helper method to define mock.On call
//   - ctxt context.Context
//   - name string
func (_e *SystemManager_Expecter) GetVideoSourceByName(ctxt interface{}, name interface{}) *SystemManager_GetVideoSourceByName_Call {
	return &SystemManager_GetVideoSourceByName_Call{Call: _e.mock.On("GetVideoSourceByName", ctxt, name)}
}

func (_c *SystemManager_GetVideoSourceByName_Call) Run(run func(ctxt context.Context, name string)) *SystemManager_GetVideoSourceByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemManager_GetVideoSourceByName_Call) Return(videoSource common.VideoSource, err error) *SystemManager_GetVideoSourceByName_Call {
	_c.Call.Return(videoSource, err)
	return _c
}

func (_c *SystemManager_GetVideoSourceByName_Call) RunAndReturn(run func(ctxt context.Context, name string) (common.VideoSource, error)) *SystemManager_GetVideoSourceByName_Call {
	_c.Call.Return(run)
	return _c
}

// ListAllSegmentsOfRecording provides a mock function for the type SystemManager
func (_mock *SystemManager) ListAllSegmentsOfRecording(ctxt context.Context, recordingID string) ([]common.VideoSegment, error) {
	ret := _mock.Called(ctxt, recordingID)

	if len(ret) == 0 {
		panic("no return value specified for ListAllSegmentsOfRecording")
	}

	var r0 []common.VideoSegment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]common.VideoSegment, error)); ok {
		return returnFunc(ctxt, recordingID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []common.VideoSegment); ok {
		r0 = returnFunc(ctxt, recordingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSegment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctxt, recordingID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_ListAllSegmentsOfRecording_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAllSegmentsOfRecording'
type SystemManager_ListAllSegmentsOfRecording_Call struct {
	*mock.Call
}

// ListAllSegmentsOfRecording is a helper method to define mock.On call
//   - ctxt context.Context
//   - recordingID string
func (_e *SystemManager_Expecter) ListAllSegmentsOfRecording(ctxt interface{}, recordingID interface{}) *SystemManager_ListAllSegmentsOfRecording_Call {
	return &SystemManager_ListAllSegmentsOfRecording_Call{Call: _e.mock.On("ListAllSegmentsOfRecording", ctxt, recordingID)}
}

func (_c *SystemManager_ListAllSegmentsOfRecording_Call) Run(run func(ctxt context.Context, recordingID string)) *SystemManager_ListAllSegmentsOfRecording_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemManager_ListAllSegmentsOfRecording_Call) Return(videoSegments []common.VideoSegment, err error) *SystemManager_ListAllSegmentsOfRecording_Call {
	_c.Call.Return(videoSegments, err)
	return _c
}

func (_c *SystemManager_ListAllSegmentsOfRecording_Call) RunAndReturn(run func(ctxt context.Context, recordingID string) ([]common.VideoSegment, error)) *SystemManager_ListAllSegmentsOfRecording_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecordingSessions provides a mock function for the type SystemManager
func (_mock *SystemManager) ListRecordingSessions(ctxt context.Context) ([]common.Recording, error) {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for ListRecordingSessions")
	}

	var r0 []common.Recording
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]common.Recording, error)); ok {
		return returnFunc(ctxt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []common.Recording); ok {
		r0 = returnFunc(ctxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Recording)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctxt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_ListRecordingSessions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecordingSessions'
type SystemManager_ListRecordingSessions_Call struct {
	*mock.Call
}

// ListRecordingSessions is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *SystemManager_Expecter) ListRecordingSessions(ctxt interface{}) *SystemManager_ListRecordingSessions_Call {
	return &SystemManager_ListRecordingSessions_Call{Call: _e.mock.On("ListRecordingSessions", ctxt)}
}

func (_c *SystemManager_ListRecordingSessions_Call) Run(run func(ctxt context.Context)) *SystemManager_ListRecordingSessions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SystemManager_ListRecordingSessions_Call) Return(recordings []common.Recording, err error) *SystemManager_ListRecordingSessions_Call {
	_c.Call.Return(recordings, err)
	return _c
}

func (_c *SystemManager_ListRecordingSessions_Call) RunAndReturn(run func(ctxt context.Context) ([]common.Recording, error)) *SystemManager_ListRecordingSessions_Call {
	_c.Call.Return(run)
	return _c
}

// ListRecordingSessionsOfSource provides a mock function for the type SystemManager
func (_mock *SystemManager) ListRecordingSessionsOfSource(ctxt context.Context, sourceID string, active bool) ([]common.Recording, error) {
	ret := _mock.Called(ctxt, sourceID, active)

	if len(ret) == 0 {
		panic("no return value specified for ListRecordingSessionsOfSource")
	}

	var r0 []common.Recording
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) ([]common.Recording, error)); ok {
		return returnFunc(ctxt, sourceID, active)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool) []common.Recording); ok {
		r0 = returnFunc(ctxt, sourceID, active)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.Recording)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = returnFunc(ctxt, sourceID, active)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_ListRecordingSessionsOfSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRecordingSessionsOfSource'
type SystemManager_ListRecordingSessionsOfSource_Call struct {
	*mock.Call
}

// ListRecordingSessionsOfSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - active bool
func (_e *SystemManager_Expecter) ListRecordingSessionsOfSource(ctxt interface{}, sourceID interface{}, active interface{}) *SystemManager_ListRecordingSessionsOfSource_Call {
	return &SystemManager_ListRecordingSessionsOfSource_Call{Call: _e.mock.On("ListRecordingSessionsOfSource", ctxt, sourceID, active)}
}

func (_c *SystemManager_ListRecordingSessionsOfSource_Call) Run(run func(ctxt context.Context, sourceID string, active bool)) *SystemManager_ListRecordingSessionsOfSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *SystemManager_ListRecordingSessionsOfSource_Call) Return(recordings []common.Recording, err error) *SystemManager_ListRecordingSessionsOfSource_Call {
	_c.Call.Return(recordings, err)
	return _c
}

func (_c *SystemManager_ListRecordingSessionsOfSource_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, active bool) ([]common.Recording, error)) *SystemManager_ListRecordingSessionsOfSource_Call {
	_c.Call.Return(run)
	return _c
}

// ListVideoSources provides a mock function for the type SystemManager
func (_mock *SystemManager) ListVideoSources(ctxt context.Context) ([]common.VideoSource, error) {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for ListVideoSources")
	}

	var r0 []common.VideoSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]common.VideoSource, error)); ok {
		return returnFunc(ctxt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []common.VideoSource); ok {
		r0 = returnFunc(ctxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]common.VideoSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctxt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SystemManager_ListVideoSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListVideoSources'
type SystemManager_ListVideoSources_Call struct {
	*mock.Call
}

// ListVideoSources is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *SystemManager_Expecter) ListVideoSources(ctxt interface{}) *SystemManager_ListVideoSources_Call {
	return &SystemManager_ListVideoSources_Call{Call: _e.mock.On("ListVideoSources", ctxt)}
}

func (_c *SystemManager_ListVideoSources_Call) Run(run func(ctxt context.Context)) *SystemManager_ListVideoSources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SystemManager_ListVideoSources_Call) Return(videoSources []common.VideoSource, err error) *SystemManager_ListVideoSources_Call {
	_c.Call.Return(videoSources, err)
	return _c
}

func (_c *SystemManager_ListVideoSources_Call) RunAndReturn(run func(ctxt context.Context) ([]common.VideoSource, error)) *SystemManager_ListVideoSources_Call {
	_c.Call.Return(run)
	return _c
}

// MarkEndOfRecordingSession provides a mock function for the type SystemManager
func (_mock *SystemManager) MarkEndOfRecordingSession(ctxt context.Context, id string, endTime time.Time, force bool) error {
	ret := _mock.Called(ctxt, id, endTime, force)

	if len(ret) == 0 {
		panic("no return value specified for MarkEndOfRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time, bool) error); ok {
		r0 = returnFunc(ctxt, id, endTime, force)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_MarkEndOfRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MarkEndOfRecordingSession'
type SystemManager_MarkEndOfRecordingSession_Call struct {
	*mock.Call
}

// MarkEndOfRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - endTime time.Time
//   - force bool
func (_e *SystemManager_Expecter) MarkEndOfRecordingSession(ctxt interface{}, id interface{}, endTime interface{}, force interface{}) *SystemManager_MarkEndOfRecordingSession_Call {
	return &SystemManager_MarkEndOfRecordingSession_Call{Call: _e.mock.On("MarkEndOfRecordingSession", ctxt, id, endTime, force)}
}

func (_c *SystemManager_MarkEndOfRecordingSession_Call) Run(run func(ctxt context.Context, id string, endTime time.Time, force bool)) *SystemManager_MarkEndOfRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *SystemManager_MarkEndOfRecordingSession_Call) Return(err error) *SystemManager_MarkEndOfRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_MarkEndOfRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, id string, endTime time.Time, force bool) error) *SystemManager_MarkEndOfRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessBroadcastMsgs provides a mock function for the type SystemManager
func (_mock *SystemManager) ProcessBroadcastMsgs(ctxt context.Context, pubTimestamp time.Time, msg []byte, metadata map[string]string) error {
	ret := _mock.Called(ctxt, pubTimestamp, msg, metadata)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBroadcastMsgs")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, []byte, map[string]string) error); ok {
		r0 = returnFunc(ctxt, pubTimestamp, msg, metadata)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_ProcessBroadcastMsgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBroadcastMsgs'
type SystemManager_ProcessBroadcastMsgs_Call struct {
	*mock.Call
}

// ProcessBroadcastMsgs is a helper method to define mock.On call
//   - ctxt context.Context
//   - pubTimestamp time.Time
//   - msg []byte
//   - metadata map[string]string
func (_e *SystemManager_Expecter) ProcessBroadcastMsgs(ctxt interface{}, pubTimestamp interface{}, msg interface{}, metadata interface{}) *SystemManager_ProcessBroadcastMsgs_Call {
	return &SystemManager_ProcessBroadcastMsgs_Call{Call: _e.mock.On("ProcessBroadcastMsgs", ctxt, pubTimestamp, msg, metadata)}
}

func (_c *SystemManager_ProcessBroadcastMsgs_Call) Run(run func(ctxt context.Context, pubTimestamp time.Time, msg []byte, metadata map[string]string)) *SystemManager_ProcessBroadcastMsgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 map[string]string
		if args[3] != nil {
			arg3 = args[3].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *SystemManager_ProcessBroadcastMsgs_Call) Return(err error) *SystemManager_ProcessBroadcastMsgs_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_ProcessBroadcastMsgs_Call) RunAndReturn(run func(ctxt context.Context, pubTimestamp time.Time, msg []byte, metadata map[string]string) error) *SystemManager_ProcessBroadcastMsgs_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function for the type SystemManager
func (_mock *SystemManager) Ready(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type SystemManager_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *SystemManager_Expecter) Ready(ctxt interface{}) *SystemManager_Ready_Call {
	return &SystemManager_Ready_Call{Call: _e.mock.On("Ready", ctxt)}
}

func (_c *SystemManager_Ready_Call) Run(run func(ctxt context.Context)) *SystemManager_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SystemManager_Ready_Call) Return(err error) *SystemManager_Ready_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_Ready_Call) RunAndReturn(run func(ctxt context.Context) error) *SystemManager_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type SystemManager
func (_mock *SystemManager) Stop(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type SystemManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *SystemManager_Expecter) Stop(ctxt interface{}) *SystemManager_Stop_Call {
	return &SystemManager_Stop_Call{Call: _e.mock.On("Stop", ctxt)}
}

func (_c *SystemManager_Stop_Call) Run(run func(ctxt context.Context)) *SystemManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SystemManager_Stop_Call) Return(err error) *SystemManager_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_Stop_Call) RunAndReturn(run func(ctxt context.Context) error) *SystemManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// StopAllActiveRecordingOfSource provides a mock function for the type SystemManager
func (_mock *SystemManager) StopAllActiveRecordingOfSource(ctxt context.Context, id string, currentTime time.Time) error {
	ret := _mock.Called(ctxt, id, currentTime)

	if len(ret) == 0 {
		panic("no return value specified for StopAllActiveRecordingOfSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = returnFunc(ctxt, id, currentTime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_StopAllActiveRecordingOfSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopAllActiveRecordingOfSource'
type SystemManager_StopAllActiveRecordingOfSource_Call struct {
	*mock.Call
}

// StopAllActiveRecordingOfSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - currentTime time.Time
func (_e *SystemManager_Expecter) StopAllActiveRecordingOfSource(ctxt interface{}, id interface{}, currentTime interface{}) *SystemManager_StopAllActiveRecordingOfSource_Call {
	return &SystemManager_StopAllActiveRecordingOfSource_Call{Call: _e.mock.On("StopAllActiveRecordingOfSource", ctxt, id, currentTime)}
}

func (_c *SystemManager_StopAllActiveRecordingOfSource_Call) Run(run func(ctxt context.Context, id string, currentTime time.Time)) *SystemManager_StopAllActiveRecordingOfSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *SystemManager_StopAllActiveRecordingOfSource_Call) Return(err error) *SystemManager_StopAllActiveRecordingOfSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_StopAllActiveRecordingOfSource_Call) RunAndReturn(run func(ctxt context.Context, id string, currentTime time.Time) error) *SystemManager_StopAllActiveRecordingOfSource_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRecordingSession provides a mock function for the type SystemManager
func (_mock *SystemManager) UpdateRecordingSession(ctxt context.Context, newSetting common.Recording) error {
	ret := _mock.Called(ctxt, newSetting)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecordingSession")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.Recording) error); ok {
		r0 = returnFunc(ctxt, newSetting)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_UpdateRecordingSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRecordingSession'
type SystemManager_UpdateRecordingSession_Call struct {
	*mock.Call
}

// UpdateRecordingSession is a helper method to define mock.On call
//   - ctxt context.Context
//   - newSetting common.Recording
func (_e *SystemManager_Expecter) UpdateRecordingSession(ctxt interface{}, newSetting interface{}) *SystemManager_UpdateRecordingSession_Call {
	return &SystemManager_UpdateRecordingSession_Call{Call: _e.mock.On("UpdateRecordingSession", ctxt, newSetting)}
}

func (_c *SystemManager_UpdateRecordingSession_Call) Run(run func(ctxt context.Context, newSetting common.Recording)) *SystemManager_UpdateRecordingSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.Recording
		if args[1] != nil {
			arg1 = args[1].(common.Recording)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemManager_UpdateRecordingSession_Call) Return(err error) *SystemManager_UpdateRecordingSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_UpdateRecordingSession_Call) RunAndReturn(run func(ctxt context.Context, newSetting common.Recording) error) *SystemManager_UpdateRecordingSession_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVideoSource provides a mock function for the type SystemManager
func (_mock *SystemManager) UpdateVideoSource(ctxt context.Context, newSetting common.VideoSource) error {
	ret := _mock.Called(ctxt, newSetting)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVideoSource")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSource) error); ok {
		r0 = returnFunc(ctxt, newSetting)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_UpdateVideoSource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVideoSource'
type SystemManager_UpdateVideoSource_Call struct {
	*mock.Call
}

// UpdateVideoSource is a helper method to define mock.On call
//   - ctxt context.Context
//   - newSetting common.VideoSource
func (_e *SystemManager_Expecter) UpdateVideoSource(ctxt interface{}, newSetting interface{}) *SystemManager_UpdateVideoSource_Call {
	return &SystemManager_UpdateVideoSource_Call{Call: _e.mock.On("UpdateVideoSource", ctxt, newSetting)}
}

func (_c *SystemManager_UpdateVideoSource_Call) Run(run func(ctxt context.Context, newSetting common.VideoSource)) *SystemManager_UpdateVideoSource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSource
		if args[1] != nil {
			arg1 = args[1].(common.VideoSource)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SystemManager_UpdateVideoSource_Call) Return(err error) *SystemManager_UpdateVideoSource_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_UpdateVideoSource_Call) RunAndReturn(run func(ctxt context.Context, newSetting common.VideoSource) error) *SystemManager_UpdateVideoSource_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVideoSourceStatus provides a mock function for the type SystemManager
func (_mock *SystemManager) UpdateVideoSourceStatus(ctxt context.Context, id string, reqRespTargetID string, sourceLocalTime time.Time) error {
	ret := _mock.Called(ctxt, id, reqRespTargetID, sourceLocalTime)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVideoSourceStatus")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, time.Time) error); ok {
		r0 = returnFunc(ctxt, id, reqRespTargetID, sourceLocalTime)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SystemManager_UpdateVideoSourceStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVideoSourceStatus'
type SystemManager_UpdateVideoSourceStatus_Call struct {
	*mock.Call
}

// UpdateVideoSourceStatus is a helper method to define mock.On call
//   - ctxt context.Context
//   - id string
//   - reqRespTargetID string
//   - sourceLocalTime time.Time
func (_e *SystemManager_Expecter) UpdateVideoSourceStatus(ctxt interface{}, id interface{}, reqRespTargetID interface{}, sourceLocalTime interface{}) *SystemManager_UpdateVideoSourceStatus_Call {
	return &SystemManager_UpdateVideoSourceStatus_Call{Call: _e.mock.On("UpdateVideoSourceStatus", ctxt, id, reqRespTargetID, sourceLocalTime)}
}

func (_c *SystemManager_UpdateVideoSourceStatus_Call) Run(run func(ctxt context.Context, id string, reqRespTargetID string, sourceLocalTime time.Time)) *SystemManager_UpdateVideoSourceStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 time.Time
		if args[3] != nil {
			arg3 = args[3].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *SystemManager_UpdateVideoSourceStatus_Call) Return(err error) *SystemManager_UpdateVideoSourceStatus_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SystemManager_UpdateVideoSourceStatus_Call) RunAndReturn(run func(ctxt context.Context, id string, reqRespTargetID string, sourceLocalTime time.Time) error) *SystemManager_UpdateVideoSourceStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewLiveStreamSegmentManager creates a new instance of LiveStreamSegmentManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLiveStreamSegmentManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *LiveStreamSegmentManager {
	mock := &LiveStreamSegmentManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// LiveStreamSegmentManager is an autogenerated mock type for the LiveStreamSegmentManager type
type LiveStreamSegmentManager struct {
	mock.Mock
}

type LiveStreamSegmentManager_Expecter struct {
	mock *mock.Mock
}

func (_m *LiveStreamSegmentManager) EXPECT() *LiveStreamSegmentManager_Expecter {
	return &LiveStreamSegmentManager_Expecter{mock: &_m.Mock}
}

// Ready provides a mock function for the type LiveStreamSegmentManager
func (_mock *LiveStreamSegmentManager) Ready(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveStreamSegmentManager_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type LiveStreamSegmentManager_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *LiveStreamSegmentManager_Expecter) Ready(ctxt interface{}) *LiveStreamSegmentManager_Ready_Call {
	return &LiveStreamSegmentManager_Ready_Call{Call: _e.mock.On("Ready", ctxt)}
}

func (_c *LiveStreamSegmentManager_Ready_Call) Run(run func(ctxt context.Context)) *LiveStreamSegmentManager_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveStreamSegmentManager_Ready_Call) Return(err error) *LiveStreamSegmentManager_Ready_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveStreamSegmentManager_Ready_Call) RunAndReturn(run func(ctxt context.Context) error) *LiveStreamSegmentManager_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterLiveStreamSegment provides a mock function for the type LiveStreamSegmentManager
func (_mock *LiveStreamSegmentManager) RegisterLiveStreamSegment(ctxt context.Context, sourceID string, segment hls.Segment, content []byte) error {
	ret := _mock.Called(ctxt, sourceID, segment, content)

	if len(ret) == 0 {
		panic("no return value specified for RegisterLiveStreamSegment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, hls.Segment, []byte) error); ok {
		r0 = returnFunc(ctxt, sourceID, segment, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveStreamSegmentManager_RegisterLiveStreamSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterLiveStreamSegment'
type LiveStreamSegmentManager_RegisterLiveStreamSegment_Call struct {
	*mock.Call
}

// RegisterLiveStreamSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - sourceID string
//   - segment hls.Segment
//   - content []byte
func (_e *LiveStreamSegmentManager_Expecter) RegisterLiveStreamSegment(ctxt interface{}, sourceID interface{}, segment interface{}, content interface{}) *LiveStreamSegmentManager_RegisterLiveStreamSegment_Call {
	return &LiveStreamSegmentManager_RegisterLiveStreamSegment_Call{Call: _e.mock.On("RegisterLiveStreamSegment", ctxt, sourceID, segment, content)}
}

func (_c *LiveStreamSegmentManager_RegisterLiveStreamSegment_Call) Run(run func(ctxt context.Context, sourceID string, segment hls.Segment, content []byte)) *LiveStreamSegmentManager_RegisterLiveStreamSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 hls.Segment
		if args[2] != nil {
			arg2 = args[2].(hls.Segment)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *LiveStreamSegmentManager_RegisterLiveStreamSegment_Call) Return(err error) *LiveStreamSegmentManager_RegisterLiveStreamSegment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveStreamSegmentManager_RegisterLiveStreamSegment_Call) RunAndReturn(run func(ctxt context.Context, sourceID string, segment hls.Segment, content []byte) error) *LiveStreamSegmentManager_RegisterLiveStreamSegment_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type LiveStreamSegmentManager
func (_mock *LiveStreamSegmentManager) Stop(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// LiveStreamSegmentManager_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type LiveStreamSegmentManager_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *LiveStreamSegmentManager_Expecter) Stop(ctxt interface{}) *LiveStreamSegmentManager_Stop_Call {
	return &LiveStreamSegmentManager_Stop_Call{Call: _e.mock.On("Stop", ctxt)}
}

func (_c *LiveStreamSegmentManager_Stop_Call) Run(run func(ctxt context.Context)) *LiveStreamSegmentManager_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *LiveStreamSegmentManager_Stop_Call) Return(err error) *LiveStreamSegmentManager_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *LiveStreamSegmentManager_Stop_Call) RunAndReturn(run func(ctxt context.Context) error) *LiveStreamSegmentManager_Stop_Call {
	_c.Call.Return(run)
	return _c
}
