// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	"github.com/alwitt/livemix/common"
	"github.com/alwitt/livemix/utils"
	mock "github.com/stretchr/testify/mock"
)

// NewBroadcaster creates a new instance of Broadcaster. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBroadcaster(t interface {
	mock.TestingT
	Cleanup(func())
}) *Broadcaster {
	mock := &Broadcaster{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Broadcaster is an autogenerated mock type for the Broadcaster type
type Broadcaster struct {
	mock.Mock
}

type Broadcaster_Expecter struct {
	mock *mock.Mock
}

func (_m *Broadcaster) EXPECT() *Broadcaster_Expecter {
	return &Broadcaster_Expecter{mock: &_m.Mock}
}

// Broadcast provides a mock function for the type Broadcaster
func (_mock *Broadcaster) Broadcast(ctxt context.Context, message interface{}) error {
	ret := _mock.Called(ctxt, message)

	if len(ret) == 0 {
		panic("no return value specified for Broadcast")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = returnFunc(ctxt, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Broadcaster_Broadcast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Broadcast'
type Broadcaster_Broadcast_Call struct {
	*mock.Call
}

// Broadcast is a helper method to define mock.On call
//   - ctxt context.Context
//   - message interface{}
func (_e *Broadcaster_Expecter) Broadcast(ctxt interface{}, message interface{}) *Broadcaster_Broadcast_Call {
	return &Broadcaster_Broadcast_Call{Call: _e.mock.On("Broadcast", ctxt, message)}
}

func (_c *Broadcaster_Broadcast_Call) Run(run func(ctxt context.Context, message interface{})) *Broadcaster_Broadcast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Broadcaster_Broadcast_Call) Return(err error) *Broadcaster_Broadcast_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Broadcaster_Broadcast_Call) RunAndReturn(run func(ctxt context.Context, message interface{}) error) *Broadcaster_Broadcast_Call {
	_c.Call.Return(run)
	return _c
}

// NewVideoSegmentCache creates a new instance of VideoSegmentCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVideoSegmentCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *VideoSegmentCache {
	mock := &VideoSegmentCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// VideoSegmentCache is an autogenerated mock type for the VideoSegmentCache type
type VideoSegmentCache struct {
	mock.Mock
}

type VideoSegmentCache_Expecter struct {
	mock *mock.Mock
}

func (_m *VideoSegmentCache) EXPECT() *VideoSegmentCache_Expecter {
	return &VideoSegmentCache_Expecter{mock: &_m.Mock}
}

// CacheEntryCount provides a mock function for the type VideoSegmentCache
func (_mock *VideoSegmentCache) CacheEntryCount(ctxt context.Context) (int, error) {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for CacheEntryCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return returnFunc(ctxt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctxt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VideoSegmentCache_CacheEntryCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheEntryCount'
type VideoSegmentCache_CacheEntryCount_Call struct {
	*mock.Call
}

// CacheEntryCount is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *VideoSegmentCache_Expecter) CacheEntryCount(ctxt interface{}) *VideoSegmentCache_CacheEntryCount_Call {
	return &VideoSegmentCache_CacheEntryCount_Call{Call: _e.mock.On("CacheEntryCount", ctxt)}
}

func (_c *VideoSegmentCache_CacheEntryCount_Call) Run(run func(ctxt context.Context)) *VideoSegmentCache_CacheEntryCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *VideoSegmentCache_CacheEntryCount_Call) Return(n int, err error) *VideoSegmentCache_CacheEntryCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *VideoSegmentCache_CacheEntryCount_Call) RunAndReturn(run func(ctxt context.Context) (int, error)) *VideoSegmentCache_CacheEntryCount_Call {
	_c.Call.Return(run)
	return _c
}

// CacheSegment provides a mock function for the type VideoSegmentCache
func (_mock *VideoSegmentCache) CacheSegment(ctxt context.Context, segment common.VideoSegmentWithData, ttl time.Duration) error {
	ret := _mock.Called(ctxt, segment, ttl)

	if len(ret) == 0 {
		panic("no return value specified for CacheSegment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSegmentWithData, time.Duration) error); ok {
		r0 = returnFunc(ctxt, segment, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VideoSegmentCache_CacheSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheSegment'
type VideoSegmentCache_CacheSegment_Call struct {
	*mock.Call
}

// CacheSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - segment common.VideoSegmentWithData
//   - ttl time.Duration
func (_e *VideoSegmentCache_Expecter) CacheSegment(ctxt interface{}, segment interface{}, ttl interface{}) *VideoSegmentCache_CacheSegment_Call {
	return &VideoSegmentCache_CacheSegment_Call{Call: _e.mock.On("CacheSegment", ctxt, segment, ttl)}
}

func (_c *VideoSegmentCache_CacheSegment_Call) Run(run func(ctxt context.Context, segment common.VideoSegmentWithData, ttl time.Duration)) *VideoSegmentCache_CacheSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSegmentWithData
		if args[1] != nil {
			arg1 = args[1].(common.VideoSegmentWithData)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *VideoSegmentCache_CacheSegment_Call) Return(err error) *VideoSegmentCache_CacheSegment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VideoSegmentCache_CacheSegment_Call) RunAndReturn(run func(ctxt context.Context, segment common.VideoSegmentWithData, ttl time.Duration) error) *VideoSegmentCache_CacheSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegment provides a mock function for the type VideoSegmentCache
func (_mock *VideoSegmentCache) GetSegment(ctxt context.Context, segment common.VideoSegment) ([]byte, error) {
	ret := _mock.Called(ctxt, segment)

	if len(ret) == 0 {
		panic("no return value specified for GetSegment")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSegment) ([]byte, error)); ok {
		return returnFunc(ctxt, segment)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSegment) []byte); ok {
		r0 = returnFunc(ctxt, segment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, common.VideoSegment) error); ok {
		r1 = returnFunc(ctxt, segment)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VideoSegmentCache_GetSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegment'
type VideoSegmentCache_GetSegment_Call struct {
	*mock.Call
}

// GetSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - segment common.VideoSegment
func (_e *VideoSegmentCache_Expecter) GetSegment(ctxt interface{}, segment interface{}) *VideoSegmentCache_GetSegment_Call {
	return &VideoSegmentCache_GetSegment_Call{Call: _e.mock.On("GetSegment", ctxt, segment)}
}

func (_c *VideoSegmentCache_GetSegment_Call) Run(run func(ctxt context.Context, segment common.VideoSegment)) *VideoSegmentCache_GetSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSegment
		if args[1] != nil {
			arg1 = args[1].(common.VideoSegment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VideoSegmentCache_GetSegment_Call) Return(bytes []byte, err error) *VideoSegmentCache_GetSegment_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *VideoSegmentCache_GetSegment_Call) RunAndReturn(run func(ctxt context.Context, segment common.VideoSegment) ([]byte, error)) *VideoSegmentCache_GetSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegments provides a mock function for the type VideoSegmentCache
func (_mock *VideoSegmentCache) GetSegments(ctxt context.Context, segments []common.VideoSegment) (map[string][]byte, error) {
	ret := _mock.Called(ctxt, segments)

	if len(ret) == 0 {
		panic("no return value specified for GetSegments")
	}

	var r0 map[string][]byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []common.VideoSegment) (map[string][]byte, error)); ok {
		return returnFunc(ctxt, segments)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []common.VideoSegment) map[string][]byte); ok {
		r0 = returnFunc(ctxt, segments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []common.VideoSegment) error); ok {
		r1 = returnFunc(ctxt, segments)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// VideoSegmentCache_GetSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegments'
type VideoSegmentCache_GetSegments_Call struct {
	*mock.Call
}

// GetSegments is a helper method to define mock.On call
//   - ctxt context.Context
//   - segments []common.VideoSegment
func (_e *VideoSegmentCache_Expecter) GetSegments(ctxt interface{}, segments interface{}) *VideoSegmentCache_GetSegments_Call {
	return &VideoSegmentCache_GetSegments_Call{Call: _e.mock.On("GetSegments", ctxt, segments)}
}

func (_c *VideoSegmentCache_GetSegments_Call) Run(run func(ctxt context.Context, segments []common.VideoSegment)) *VideoSegmentCache_GetSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []common.VideoSegment
		if args[1] != nil {
			arg1 = args[1].([]common.VideoSegment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VideoSegmentCache_GetSegments_Call) Return(stringToBytes map[string][]byte, err error) *VideoSegmentCache_GetSegments_Call {
	_c.Call.Return(stringToBytes, err)
	return _c
}

func (_c *VideoSegmentCache_GetSegments_Call) RunAndReturn(run func(ctxt context.Context, segments []common.VideoSegment) (map[string][]byte, error)) *VideoSegmentCache_GetSegments_Call {
	_c.Call.Return(run)
	return _c
}

// PurgeSegments provides a mock function for the type VideoSegmentCache
func (_mock *VideoSegmentCache) PurgeSegments(ctxt context.Context, segments []common.VideoSegment) error {
	ret := _mock.Called(ctxt, segments)

	if len(ret) == 0 {
		panic("no return value specified for PurgeSegments")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []common.VideoSegment) error); ok {
		r0 = returnFunc(ctxt, segments)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// VideoSegmentCache_PurgeSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PurgeSegments'
type VideoSegmentCache_PurgeSegments_Call struct {
	*mock.Call
}

// PurgeSegments is a helper method to define mock.On call
//   - ctxt context.Context
//   - segments []common.VideoSegment
func (_e *VideoSegmentCache_Expecter) PurgeSegments(ctxt interface{}, segments interface{}) *VideoSegmentCache_PurgeSegments_Call {
	return &VideoSegmentCache_PurgeSegments_Call{Call: _e.mock.On("PurgeSegments", ctxt, segments)}
}

func (_c *VideoSegmentCache_PurgeSegments_Call) Run(run func(ctxt context.Context, segments []common.VideoSegment)) *VideoSegmentCache_PurgeSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []common.VideoSegment
		if args[1] != nil {
			arg1 = args[1].([]common.VideoSegment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *VideoSegmentCache_PurgeSegments_Call) Return(err error) *VideoSegmentCache_PurgeSegments_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *VideoSegmentCache_PurgeSegments_Call) RunAndReturn(run func(ctxt context.Context, segments []common.VideoSegment) error) *VideoSegmentCache_PurgeSegments_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileSystemWatcher creates a new instance of FileSystemWatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileSystemWatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileSystemWatcher {
	mock := &FileSystemWatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FileSystemWatcher is an autogenerated mock type for the FileSystemWatcher type
type FileSystemWatcher struct {
	mock.Mock
}

type FileSystemWatcher_Expecter struct {
	mock *mock.Mock
}

func (_m *FileSystemWatcher) EXPECT() *FileSystemWatcher_Expecter {
	return &FileSystemWatcher_Expecter{mock: &_m.Mock}
}

// AddPath provides a mock function for the type FileSystemWatcher
func (_mock *FileSystemWatcher) AddPath(ctxt context.Context, newPath string) error {
	ret := _mock.Called(ctxt, newPath)

	if len(ret) == 0 {
		panic("no return value specified for AddPath")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctxt, newPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystemWatcher_AddPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPath'
type FileSystemWatcher_AddPath_Call struct {
	*mock.Call
}

// AddPath is a helper method to define mock.On call
//   - ctxt context.Context
//   - newPath string
func (_e *FileSystemWatcher_Expecter) AddPath(ctxt interface{}, newPath interface{}) *FileSystemWatcher_AddPath_Call {
	return &FileSystemWatcher_AddPath_Call{Call: _e.mock.On("AddPath", ctxt, newPath)}
}

func (_c *FileSystemWatcher_AddPath_Call) Run(run func(ctxt context.Context, newPath string)) *FileSystemWatcher_AddPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystemWatcher_AddPath_Call) Return(err error) *FileSystemWatcher_AddPath_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystemWatcher_AddPath_Call) RunAndReturn(run func(ctxt context.Context, newPath string) error) *FileSystemWatcher_AddPath_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePath provides a mock function for the type FileSystemWatcher
func (_mock *FileSystemWatcher) RemovePath(ctxt context.Context, path string) error {
	ret := _mock.Called(ctxt, path)

	if len(ret) == 0 {
		panic("no return value specified for RemovePath")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctxt, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystemWatcher_RemovePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePath'
type FileSystemWatcher_RemovePath_Call struct {
	*mock.Call
}

// RemovePath is a helper method to define mock.On call
//   - ctxt context.Context
//   - path string
func (_e *FileSystemWatcher_Expecter) RemovePath(ctxt interface{}, path interface{}) *FileSystemWatcher_RemovePath_Call {
	return &FileSystemWatcher_RemovePath_Call{Call: _e.mock.On("RemovePath", ctxt, path)}
}

func (_c *FileSystemWatcher_RemovePath_Call) Run(run func(ctxt context.Context, path string)) *FileSystemWatcher_RemovePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystemWatcher_RemovePath_Call) Return(err error) *FileSystemWatcher_RemovePath_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystemWatcher_RemovePath_Call) RunAndReturn(run func(ctxt context.Context, path string) error) *FileSystemWatcher_RemovePath_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function for the type FileSystemWatcher
func (_mock *FileSystemWatcher) Start(ctxt context.Context, runtimeCtxt context.Context) error {
	ret := _mock.Called(ctxt, runtimeCtxt)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, context.Context) error); ok {
		r0 = returnFunc(ctxt, runtimeCtxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystemWatcher_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type FileSystemWatcher_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctxt context.Context
//   - runtimeCtxt context.Context
func (_e *FileSystemWatcher_Expecter) Start(ctxt interface{}, runtimeCtxt interface{}) *FileSystemWatcher_Start_Call {
	return &FileSystemWatcher_Start_Call{Call: _e.mock.On("Start", ctxt, runtimeCtxt)}
}

func (_c *FileSystemWatcher_Start_Call) Run(run func(ctxt context.Context, runtimeCtxt context.Context)) *FileSystemWatcher_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 context.Context
		if args[1] != nil {
			arg1 = args[1].(context.Context)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FileSystemWatcher_Start_Call) Return(err error) *FileSystemWatcher_Start_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystemWatcher_Start_Call) RunAndReturn(run func(ctxt context.Context, runtimeCtxt context.Context) error) *FileSystemWatcher_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type FileSystemWatcher
func (_mock *FileSystemWatcher) Stop(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FileSystemWatcher_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type FileSystemWatcher_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *FileSystemWatcher_Expecter) Stop(ctxt interface{}) *FileSystemWatcher_Stop_Call {
	return &FileSystemWatcher_Stop_Call{Call: _e.mock.On("Stop", ctxt)}
}

func (_c *FileSystemWatcher_Stop_Call) Run(run func(ctxt context.Context)) *FileSystemWatcher_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FileSystemWatcher_Stop_Call) Return(err error) *FileSystemWatcher_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FileSystemWatcher_Stop_Call) RunAndReturn(run func(ctxt context.Context) error) *FileSystemWatcher_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegmentMetricsAgent creates a new instance of SegmentMetricsAgent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentMetricsAgent(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentMetricsAgent {
	mock := &SegmentMetricsAgent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SegmentMetricsAgent is an autogenerated mock type for the SegmentMetricsAgent type
type SegmentMetricsAgent struct {
	mock.Mock
}

type SegmentMetricsAgent_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentMetricsAgent) EXPECT() *SegmentMetricsAgent_Expecter {
	return &SegmentMetricsAgent_Expecter{mock: &_m.Mock}
}

// RecordSegment provides a mock function for the type SegmentMetricsAgent
func (_mock *SegmentMetricsAgent) RecordSegment(segmentSize int, labels map[string]string) {
	_mock.Called(segmentSize, labels)
	return
}

// SegmentMetricsAgent_RecordSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordSegment'
type SegmentMetricsAgent_RecordSegment_Call struct {
	*mock.Call
}

// RecordSegment is a helper method to define mock.On call
//   - segmentSize int
//   - labels map[string]string
func (_e *SegmentMetricsAgent_Expecter) RecordSegment(segmentSize interface{}, labels interface{}) *SegmentMetricsAgent_RecordSegment_Call {
	return &SegmentMetricsAgent_RecordSegment_Call{Call: _e.mock.On("RecordSegment", segmentSize, labels)}
}

func (_c *SegmentMetricsAgent_RecordSegment_Call) Run(run func(segmentSize int, labels map[string]string)) *SegmentMetricsAgent_RecordSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 map[string]string
		if args[1] != nil {
			arg1 = args[1].(map[string]string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SegmentMetricsAgent_RecordSegment_Call) Return() *SegmentMetricsAgent_RecordSegment_Call {
	_c.Call.Return()
	return _c
}

func (_c *SegmentMetricsAgent_RecordSegment_Call) RunAndReturn(run func(segmentSize int, labels map[string]string)) *SegmentMetricsAgent_RecordSegment_Call {
	_c.Run(run)
	return _c
}

// NewS3Client creates a new instance of S3Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3Client(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3Client {
	mock := &S3Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// S3Client is an autogenerated mock type for the S3Client type
type S3Client struct {
	mock.Mock
}

type S3Client_Expecter struct {
	mock *mock.Mock
}

func (_m *S3Client) EXPECT() *S3Client_Expecter {
	return &S3Client_Expecter{mock: &_m.Mock}
}

// CreateBucket provides a mock function for the type S3Client
func (_mock *S3Client) CreateBucket(ctxt context.Context, bucketName string) error {
	ret := _mock.Called(ctxt, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for CreateBucket")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctxt, bucketName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// S3Client_CreateBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBucket'
type S3Client_CreateBucket_Call struct {
	*mock.Call
}

// CreateBucket is a helper method to define mock.On call
//   - ctxt context.Context
//   - bucketName string
func (_e *S3Client_Expecter) CreateBucket(ctxt interface{}, bucketName interface{}) *S3Client_CreateBucket_Call {
	return &S3Client_CreateBucket_Call{Call: _e.mock.On("CreateBucket", ctxt, bucketName)}
}

func (_c *S3Client_CreateBucket_Call) Run(run func(ctxt context.Context, bucketName string)) *S3Client_CreateBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *S3Client_CreateBucket_Call) Return(err error) *S3Client_CreateBucket_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *S3Client_CreateBucket_Call) RunAndReturn(run func(ctxt context.Context, bucketName string) error) *S3Client_CreateBucket_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBucket provides a mock function for the type S3Client
func (_mock *S3Client) DeleteBucket(ctxt context.Context, bucketName string) error {
	ret := _mock.Called(ctxt, bucketName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucket")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctxt, bucketName)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// S3Client_DeleteBucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBucket'
type S3Client_DeleteBucket_Call struct {
	*mock.Call
}

// DeleteBucket is a helper method to define mock.On call
//   - ctxt context.Context
//   - bucketName string
func (_e *S3Client_Expecter) DeleteBucket(ctxt interface{}, bucketName interface{}) *S3Client_DeleteBucket_Call {
	return &S3Client_DeleteBucket_Call{Call: _e.mock.On("DeleteBucket", ctxt, bucketName)}
}

func (_c *S3Client_DeleteBucket_Call) Run(run func(ctxt context.Context, bucketName string)) *S3Client_DeleteBucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *S3Client_DeleteBucket_Call) Return(err error) *S3Client_DeleteBucket_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *S3Client_DeleteBucket_Call) RunAndReturn(run func(ctxt context.Context, bucketName string) error) *S3Client_DeleteBucket_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObject provides a mock function for the type S3Client
func (_mock *S3Client) DeleteObject(ctxt context.Context, bucketName string, objectKey string) error {
	ret := _mock.Called(ctxt, bucketName, objectKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctxt, bucketName, objectKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// S3Client_DeleteObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObject'
type S3Client_DeleteObject_Call struct {
	*mock.Call
}

// DeleteObject is a helper method to define mock.On call
//   - ctxt context.Context
//   - bucketName string
//   - objectKey string
func (_e *S3Client_Expecter) DeleteObject(ctxt interface{}, bucketName interface{}, objectKey interface{}) *S3Client_DeleteObject_Call {
	return &S3Client_DeleteObject_Call{Call: _e.mock.On("DeleteObject", ctxt, bucketName, objectKey)}
}

func (_c *S3Client_DeleteObject_Call) Run(run func(ctxt context.Context, bucketName string, objectKey string)) *S3Client_DeleteObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *S3Client_DeleteObject_Call) Return(err error) *S3Client_DeleteObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *S3Client_DeleteObject_Call) RunAndReturn(run func(ctxt context.Context, bucketName string, objectKey string) error) *S3Client_DeleteObject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteObjects provides a mock function for the type S3Client
func (_mock *S3Client) DeleteObjects(ctxt context.Context, bucketName string, objectKeys []string) []utils.S3BulkDeleteError {
	ret := _mock.Called(ctxt, bucketName, objectKeys)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjects")
	}

	var r0 []utils.S3BulkDeleteError
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) []utils.S3BulkDeleteError); ok {
		r0 = returnFunc(ctxt, bucketName, objectKeys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]utils.S3BulkDeleteError)
		}
	}
	return r0
}

// S3Client_DeleteObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObjects'
type S3Client_DeleteObjects_Call struct {
	*mock.Call
}

// DeleteObjects is a helper method to define mock.On call
//   - ctxt context.Context
//   - bucketName string
//   - objectKeys []string
func (_e *S3Client_Expecter) DeleteObjects(ctxt interface{}, bucketName interface{}, objectKeys interface{}) *S3Client_DeleteObjects_Call {
	return &S3Client_DeleteObjects_Call{Call: _e.mock.On("DeleteObjects", ctxt, bucketName, objectKeys)}
}

func (_c *S3Client_DeleteObjects_Call) Run(run func(ctxt context.Context, bucketName string, objectKeys []string)) *S3Client_DeleteObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *S3Client_DeleteObjects_Call) Return(s3BulkDeleteErrors []utils.S3BulkDeleteError) *S3Client_DeleteObjects_Call {
	_c.Call.Return(s3BulkDeleteErrors)
	return _c
}

func (_c *S3Client_DeleteObjects_Call) RunAndReturn(run func(ctxt context.Context, bucketName string, objectKeys []string) []utils.S3BulkDeleteError) *S3Client_DeleteObjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function for the type S3Client
func (_mock *S3Client) GetObject(ctxt context.Context, bucketName string, objectKey string) ([]byte, error) {
	ret := _mock.Called(ctxt, bucketName, objectKey)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return returnFunc(ctxt, bucketName, objectKey)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = returnFunc(ctxt, bucketName, objectKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctxt, bucketName, objectKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// S3Client_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type S3Client_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctxt context.Context
//   - bucketName string
//   - objectKey string
func (_e *S3Client_Expecter) GetObject(ctxt interface{}, bucketName interface{}, objectKey interface{}) *S3Client_GetObject_Call {
	return &S3Client_GetObject_Call{Call: _e.mock.On("GetObject", ctxt, bucketName, objectKey)}
}

func (_c *S3Client_GetObject_Call) Run(run func(ctxt context.Context, bucketName string, objectKey string)) *S3Client_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *S3Client_GetObject_Call) Return(bytes []byte, err error) *S3Client_GetObject_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *S3Client_GetObject_Call) RunAndReturn(run func(ctxt context.Context, bucketName string, objectKey string) ([]byte, error)) *S3Client_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// ListBuckets provides a mock function for the type S3Client
func (_mock *S3Client) ListBuckets(ctxt context.Context) ([]string, error) {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for ListBuckets")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return returnFunc(ctxt)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctxt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctxt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// S3Client_ListBuckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBuckets'
type S3Client_ListBuckets_Call struct {
	*mock.Call
}

// ListBuckets is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *S3Client_Expecter) ListBuckets(ctxt interface{}) *S3Client_ListBuckets_Call {
	return &S3Client_ListBuckets_Call{Call: _e.mock.On("ListBuckets", ctxt)}
}

func (_c *S3Client_ListBuckets_Call) Run(run func(ctxt context.Context)) *S3Client_ListBuckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *S3Client_ListBuckets_Call) Return(strings []string, err error) *S3Client_ListBuckets_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *S3Client_ListBuckets_Call) RunAndReturn(run func(ctxt context.Context) ([]string, error)) *S3Client_ListBuckets_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function for the type S3Client
func (_mock *S3Client) ListObjects(ctxt context.Context, bucket string, prefix *string) ([]string, error) {
	ret := _mock.Called(ctxt, bucket, prefix)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) ([]string, error)); ok {
		return returnFunc(ctxt, bucket, prefix)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *string) []string); ok {
		r0 = returnFunc(ctxt, bucket, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, *string) error); ok {
		r1 = returnFunc(ctxt, bucket, prefix)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// S3Client_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type S3Client_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctxt context.Context
//   - bucket string
//   - prefix *string
func (_e *S3Client_Expecter) ListObjects(ctxt interface{}, bucket interface{}, prefix interface{}) *S3Client_ListObjects_Call {
	return &S3Client_ListObjects_Call{Call: _e.mock.On("ListObjects", ctxt, bucket, prefix)}
}

func (_c *S3Client_ListObjects_Call) Run(run func(ctxt context.Context, bucket string, prefix *string)) *S3Client_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *string
		if args[2] != nil {
			arg2 = args[2].(*string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *S3Client_ListObjects_Call) Return(strings []string, err error) *S3Client_ListObjects_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *S3Client_ListObjects_Call) RunAndReturn(run func(ctxt context.Context, bucket string, prefix *string) ([]string, error)) *S3Client_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function for the type S3Client
func (_mock *S3Client) PutObject(ctxt context.Context, bucketName string, objectKey string, content []byte) error {
	ret := _mock.Called(ctxt, bucketName, objectKey, content)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []byte) error); ok {
		r0 = returnFunc(ctxt, bucketName, objectKey, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// S3Client_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type S3Client_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctxt context.Context
//   - bucketName string
//   - objectKey string
//   - content []byte
func (_e *S3Client_Expecter) PutObject(ctxt interface{}, bucketName interface{}, objectKey interface{}, content interface{}) *S3Client_PutObject_Call {
	return &S3Client_PutObject_Call{Call: _e.mock.On("PutObject", ctxt, bucketName, objectKey, content)}
}

func (_c *S3Client_PutObject_Call) Run(run func(ctxt context.Context, bucketName string, objectKey string, content []byte)) *S3Client_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *S3Client_PutObject_Call) Return(err error) *S3Client_PutObject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *S3Client_PutObject_Call) RunAndReturn(run func(ctxt context.Context, bucketName string, objectKey string, content []byte) error) *S3Client_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegmentReader creates a new instance of SegmentReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentReader {
	mock := &SegmentReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SegmentReader is an autogenerated mock type for the SegmentReader type
type SegmentReader struct {
	mock.Mock
}

type SegmentReader_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentReader) EXPECT() *SegmentReader_Expecter {
	return &SegmentReader_Expecter{mock: &_m.Mock}
}

// ReadSegment provides a mock function for the type SegmentReader
func (_mock *SegmentReader) ReadSegment(ctxt context.Context, segment common.VideoSegment, returnCB utils.SegmentReturnCallback) error {
	ret := _mock.Called(ctxt, segment, returnCB)

	if len(ret) == 0 {
		panic("no return value specified for ReadSegment")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, common.VideoSegment, utils.SegmentReturnCallback) error); ok {
		r0 = returnFunc(ctxt, segment, returnCB)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SegmentReader_ReadSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadSegment'
type SegmentReader_ReadSegment_Call struct {
	*mock.Call
}

// ReadSegment is a helper method to define mock.On call
//   - ctxt context.Context
//   - segment common.VideoSegment
//   - returnCB utils.SegmentReturnCallback
func (_e *SegmentReader_Expecter) ReadSegment(ctxt interface{}, segment interface{}, returnCB interface{}) *SegmentReader_ReadSegment_Call {
	return &SegmentReader_ReadSegment_Call{Call: _e.mock.On("ReadSegment", ctxt, segment, returnCB)}
}

func (_c *SegmentReader_ReadSegment_Call) Run(run func(ctxt context.Context, segment common.VideoSegment, returnCB utils.SegmentReturnCallback)) *SegmentReader_ReadSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 common.VideoSegment
		if args[1] != nil {
			arg1 = args[1].(common.VideoSegment)
		}
		var arg2 utils.SegmentReturnCallback
		if args[2] != nil {
			arg2 = args[2].(utils.SegmentReturnCallback)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *SegmentReader_ReadSegment_Call) Return(err error) *SegmentReader_ReadSegment_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SegmentReader_ReadSegment_Call) RunAndReturn(run func(ctxt context.Context, segment common.VideoSegment, returnCB utils.SegmentReturnCallback) error) *SegmentReader_ReadSegment_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function for the type SegmentReader
func (_mock *SegmentReader) Stop(ctxt context.Context) error {
	ret := _mock.Called(ctxt)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctxt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SegmentReader_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type SegmentReader_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - ctxt context.Context
func (_e *SegmentReader_Expecter) Stop(ctxt interface{}) *SegmentReader_Stop_Call {
	return &SegmentReader_Stop_Call{Call: _e.mock.On("Stop", ctxt)}
}

func (_c *SegmentReader_Stop_Call) Run(run func(ctxt context.Context)) *SegmentReader_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SegmentReader_Stop_Call) Return(err error) *SegmentReader_Stop_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SegmentReader_Stop_Call) RunAndReturn(run func(ctxt context.Context) error) *SegmentReader_Stop_Call {
	_c.Call.Return(run)
	return _c
}
